// <auto-generated />
using System;
using CRS.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CRS.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("crs")
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CRS.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", "crs");
                });

            modelBuilder.Entity("CRS.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CommunityId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CommunityId");

                    b.ToTable("Addresses", "crs");
                });

            modelBuilder.Entity("CRS.Models.BuildingElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastServiced")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedsService")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("BuildingElements", "crs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Pitched Roof",
                            NeedsService = true
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Flat Roof",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Siding",
                            NeedsService = true
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Gutters/Downspouts",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Attached Lighting",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Shutters",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Decks",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Flooring",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Lighting",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Intercom",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Security System",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Elevator(s)",
                            NeedsService = true
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "AC Unit(s)",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Heating Unit(s)",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Water Unit(s)",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Kitchen",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 17,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Bathroom(s)",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 18,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Doors",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 19,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Windows",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 20,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Balconies",
                            NeedsService = false
                        });
                });

            modelBuilder.Entity("CRS.Models.CommonElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastServiced")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedsService")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("CommonElements", "crs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Clubhouse",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Pool",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Playground",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Tennis/Ball Courts",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Property Fencing",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Pool(s)/Lake(s)",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Gazebos(s)/Pavilion(s)",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Entry Signage/Structure(s)",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Street Signage",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Roads",
                            NeedsService = true
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Catch Basins",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Parking",
                            NeedsService = true
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Sidewalks",
                            NeedsService = true
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Driveways",
                            NeedsService = true
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Patios",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Porches",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 17,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Privacy Fencing",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 18,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Garage(s)",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 19,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Pump Station",
                            NeedsService = true
                        },
                        new
                        {
                            Id = 20,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Retaining Walls",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 21,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Fountains",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 22,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Property Lighting",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 23,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Street Lighting",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 24,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Paved Trails/Paths",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 25,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Mail Huts/Boxes",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 26,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Fire Hydrants",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 27,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Sports Fields",
                            NeedsService = false
                        },
                        new
                        {
                            Id = 28,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            IsActive = true,
                            Name = "Shed(s)/Storage",
                            NeedsService = false
                        });
                });

            modelBuilder.Entity("CRS.Models.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Communities", "crs");
                });

            modelBuilder.Entity("CRS.Models.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contacts", "crs");
                });

            modelBuilder.Entity("CRS.Models.ElementMeasurementOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ElementMeasurementOptions", "crs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "Square Feet",
                            Unit = "sq. ft.",
                            ZOrder = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "Linear Feet",
                            Unit = "LF.",
                            ZOrder = 0
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "Each",
                            Unit = "ea.",
                            ZOrder = 0
                        });
                });

            modelBuilder.Entity("CRS.Models.ElementRemainingLifeOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ElementRemainingLifeOptions", "crs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "1-5 Years",
                            Unit = "1-5",
                            ZOrder = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "6-10 Years",
                            Unit = "6-10",
                            ZOrder = 1
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "11-15 Years",
                            Unit = "11-15",
                            ZOrder = 2
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "16-20 Years",
                            Unit = "16-20",
                            ZOrder = 3
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "21-25 Years",
                            Unit = "21-25",
                            ZOrder = 4
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "26-30 Years",
                            Unit = "26-30",
                            ZOrder = 5
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "31-35 Years",
                            Unit = "31-35",
                            ZOrder = 6
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "36-40 Years",
                            Unit = "36-40",
                            ZOrder = 7
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "41-45 Years",
                            Unit = "41-45",
                            ZOrder = 8
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "46-50 Years",
                            Unit = "46-50",
                            ZOrder = 9
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "51-55 Years",
                            Unit = "51-55",
                            ZOrder = 10
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "56-60 Years",
                            Unit = "56-60",
                            ZOrder = 11
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "61-65 Years",
                            Unit = "61-65",
                            ZOrder = 12
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "66-70 Years",
                            Unit = "66-70",
                            ZOrder = 13
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "71-75 Years",
                            Unit = "71-75",
                            ZOrder = 14
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "76-80 Years",
                            Unit = "76-80",
                            ZOrder = 15
                        });
                });

            modelBuilder.Entity("CRS.Models.ElementUsefulLifeOptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ZOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ElementUsefulLifeOptions", "crs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "1-5 Years",
                            Unit = "1-5",
                            ZOrder = 0
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "6-10 Years",
                            Unit = "6-10",
                            ZOrder = 1
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "11-15 Years",
                            Unit = "11-15",
                            ZOrder = 2
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "16-20 Years",
                            Unit = "16-20",
                            ZOrder = 3
                        },
                        new
                        {
                            Id = 5,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "21-25 Years",
                            Unit = "21-25",
                            ZOrder = 4
                        },
                        new
                        {
                            Id = 6,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "26-30 Years",
                            Unit = "26-30",
                            ZOrder = 5
                        },
                        new
                        {
                            Id = 7,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "31-35 Years",
                            Unit = "31-35",
                            ZOrder = 6
                        },
                        new
                        {
                            Id = 8,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "36-40 Years",
                            Unit = "36-40",
                            ZOrder = 7
                        },
                        new
                        {
                            Id = 9,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "41-45 Years",
                            Unit = "41-45",
                            ZOrder = 8
                        },
                        new
                        {
                            Id = 10,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "46-50 Years",
                            Unit = "46-50",
                            ZOrder = 9
                        },
                        new
                        {
                            Id = 11,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "51-55 Years",
                            Unit = "51-55",
                            ZOrder = 10
                        },
                        new
                        {
                            Id = 12,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "56-60 Years",
                            Unit = "56-60",
                            ZOrder = 11
                        },
                        new
                        {
                            Id = 13,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "61-65 Years",
                            Unit = "61-65",
                            ZOrder = 12
                        },
                        new
                        {
                            Id = 14,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "66-70 Years",
                            Unit = "66-70",
                            ZOrder = 13
                        },
                        new
                        {
                            Id = 15,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "71-75 Years",
                            Unit = "71-75",
                            ZOrder = 14
                        },
                        new
                        {
                            Id = 16,
                            DateCreated = new DateTime(2025, 2, 1, 17, 56, 22, 0, DateTimeKind.Local),
                            DisplayText = "76-80 Years",
                            Unit = "76-80",
                            ZOrder = 15
                        });
                });

            modelBuilder.Entity("CRS.Models.PropertyManager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("PropertyManagers", "crs");
                });

            modelBuilder.Entity("CRS.Models.ReserveStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CommunityId")
                        .HasColumnType("int");

                    b.Property<int>("ContactId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateApproved")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<int>("PointOfContactType")
                        .HasColumnType("int");

                    b.Property<int?>("PropertyManagerId")
                        .HasColumnType("int");

                    b.Property<string>("SpecialistUserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CommunityId");

                    b.HasIndex("ContactId");

                    b.HasIndex("PropertyManagerId");

                    b.HasIndex("SpecialistUserId");

                    b.ToTable("ReserveStudies", "crs");
                });

            modelBuilder.Entity("CRS.Models.ReserveStudyAdditionalElement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ElementMeasurementOptionsId")
                        .HasColumnType("int");

                    b.Property<int?>("ElementRemainingLifeOptionsId")
                        .HasColumnType("int");

                    b.Property<int?>("ElementUsefulLifeOptionsId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastServiced")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NeedsService")
                        .HasColumnType("bit");

                    b.Property<int?>("ReserveStudyId")
                        .HasColumnType("int");

                    b.Property<int?>("ServiceContactId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ElementMeasurementOptionsId");

                    b.HasIndex("ElementRemainingLifeOptionsId");

                    b.HasIndex("ElementUsefulLifeOptionsId");

                    b.HasIndex("ReserveStudyId");

                    b.HasIndex("ServiceContactId");

                    b.ToTable("ReserveStudyAdditionalElements", "crs");
                });

            modelBuilder.Entity("CRS.Models.ReserveStudyBuildingElement", b =>
                {
                    b.Property<int>("ReserveStudyId")
                        .HasColumnType("int");

                    b.Property<int>("BuildingElementId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ElementMeasurementOptionsId")
                        .HasColumnType("int");

                    b.Property<int?>("ElementRemainingLifeOptionsId")
                        .HasColumnType("int");

                    b.Property<int?>("ElementUsefulLifeOptionsId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastServiced")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceContactId")
                        .HasColumnType("int");

                    b.HasKey("ReserveStudyId", "BuildingElementId");

                    b.HasIndex("BuildingElementId");

                    b.HasIndex("ElementMeasurementOptionsId");

                    b.HasIndex("ElementRemainingLifeOptionsId");

                    b.HasIndex("ElementUsefulLifeOptionsId");

                    b.HasIndex("ServiceContactId");

                    b.ToTable("ReserveStudyBuildingElements", "crs");
                });

            modelBuilder.Entity("CRS.Models.ReserveStudyCommonElement", b =>
                {
                    b.Property<int>("ReserveStudyId")
                        .HasColumnType("int");

                    b.Property<int>("CommonElementId")
                        .HasColumnType("int");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ElementMeasurementOptionsId")
                        .HasColumnType("int");

                    b.Property<int?>("ElementRemainingLifeOptionsId")
                        .HasColumnType("int");

                    b.Property<int?>("ElementUsefulLifeOptionsId")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastServiced")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ServiceContactId")
                        .HasColumnType("int");

                    b.HasKey("ReserveStudyId", "CommonElementId");

                    b.HasIndex("CommonElementId");

                    b.HasIndex("ElementMeasurementOptionsId");

                    b.HasIndex("ElementRemainingLifeOptionsId");

                    b.HasIndex("ElementUsefulLifeOptionsId");

                    b.HasIndex("ServiceContactId");

                    b.ToTable("ReserveStudyCommonElements", "crs");
                });

            modelBuilder.Entity("CRS.Models.ServiceContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ServiceContacts", "crs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", "crs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", "crs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", "crs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", "crs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", "crs");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", "crs");
                });

            modelBuilder.Entity("CRS.Models.Address", b =>
                {
                    b.HasOne("CRS.Models.Community", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CommunityId");
                });

            modelBuilder.Entity("CRS.Models.ReserveStudy", b =>
                {
                    b.HasOne("CRS.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRS.Models.Community", "Community")
                        .WithMany()
                        .HasForeignKey("CommunityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRS.Models.Contact", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRS.Models.PropertyManager", "PropertyManager")
                        .WithMany()
                        .HasForeignKey("PropertyManagerId");

                    b.HasOne("CRS.Data.ApplicationUser", "Specialist")
                        .WithMany()
                        .HasForeignKey("SpecialistUserId");

                    b.Navigation("Community");

                    b.Navigation("Contact");

                    b.Navigation("PropertyManager");

                    b.Navigation("Specialist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CRS.Models.ReserveStudyAdditionalElement", b =>
                {
                    b.HasOne("CRS.Models.ElementMeasurementOptions", "ElementMeasurementOptions")
                        .WithMany()
                        .HasForeignKey("ElementMeasurementOptionsId");

                    b.HasOne("CRS.Models.ElementRemainingLifeOptions", "ElementRemainingLifeOptions")
                        .WithMany()
                        .HasForeignKey("ElementRemainingLifeOptionsId");

                    b.HasOne("CRS.Models.ElementUsefulLifeOptions", "ElementUsefulLifeOptions")
                        .WithMany()
                        .HasForeignKey("ElementUsefulLifeOptionsId");

                    b.HasOne("CRS.Models.ReserveStudy", "ReserveStudy")
                        .WithMany("ReserveStudyAdditionalElements")
                        .HasForeignKey("ReserveStudyId");

                    b.HasOne("CRS.Models.ServiceContact", "ServiceContact")
                        .WithMany()
                        .HasForeignKey("ServiceContactId");

                    b.Navigation("ElementMeasurementOptions");

                    b.Navigation("ElementRemainingLifeOptions");

                    b.Navigation("ElementUsefulLifeOptions");

                    b.Navigation("ReserveStudy");

                    b.Navigation("ServiceContact");
                });

            modelBuilder.Entity("CRS.Models.ReserveStudyBuildingElement", b =>
                {
                    b.HasOne("CRS.Models.BuildingElement", "BuildingElement")
                        .WithMany("ReserveStudyBuildingElements")
                        .HasForeignKey("BuildingElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRS.Models.ElementMeasurementOptions", "ElementMeasurementOptions")
                        .WithMany()
                        .HasForeignKey("ElementMeasurementOptionsId");

                    b.HasOne("CRS.Models.ElementRemainingLifeOptions", "ElementRemainingLifeOptions")
                        .WithMany()
                        .HasForeignKey("ElementRemainingLifeOptionsId");

                    b.HasOne("CRS.Models.ElementUsefulLifeOptions", "ElementUsefulLifeOptions")
                        .WithMany()
                        .HasForeignKey("ElementUsefulLifeOptionsId");

                    b.HasOne("CRS.Models.ReserveStudy", "ReserveStudy")
                        .WithMany("ReserveStudyBuildingElements")
                        .HasForeignKey("ReserveStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRS.Models.ServiceContact", "ServiceContact")
                        .WithMany()
                        .HasForeignKey("ServiceContactId");

                    b.Navigation("BuildingElement");

                    b.Navigation("ElementMeasurementOptions");

                    b.Navigation("ElementRemainingLifeOptions");

                    b.Navigation("ElementUsefulLifeOptions");

                    b.Navigation("ReserveStudy");

                    b.Navigation("ServiceContact");
                });

            modelBuilder.Entity("CRS.Models.ReserveStudyCommonElement", b =>
                {
                    b.HasOne("CRS.Models.CommonElement", "CommonElement")
                        .WithMany("ReserveStudyCommonElements")
                        .HasForeignKey("CommonElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRS.Models.ElementMeasurementOptions", "ElementMeasurementOptions")
                        .WithMany()
                        .HasForeignKey("ElementMeasurementOptionsId");

                    b.HasOne("CRS.Models.ElementRemainingLifeOptions", "ElementRemainingLifeOptions")
                        .WithMany()
                        .HasForeignKey("ElementRemainingLifeOptionsId");

                    b.HasOne("CRS.Models.ElementUsefulLifeOptions", "ElementUsefulLifeOptions")
                        .WithMany()
                        .HasForeignKey("ElementUsefulLifeOptionsId");

                    b.HasOne("CRS.Models.ReserveStudy", "ReserveStudy")
                        .WithMany("ReserveStudyCommonElements")
                        .HasForeignKey("ReserveStudyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRS.Models.ServiceContact", "ServiceContact")
                        .WithMany()
                        .HasForeignKey("ServiceContactId");

                    b.Navigation("CommonElement");

                    b.Navigation("ElementMeasurementOptions");

                    b.Navigation("ElementRemainingLifeOptions");

                    b.Navigation("ElementUsefulLifeOptions");

                    b.Navigation("ReserveStudy");

                    b.Navigation("ServiceContact");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CRS.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CRS.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRS.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CRS.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRS.Models.BuildingElement", b =>
                {
                    b.Navigation("ReserveStudyBuildingElements");
                });

            modelBuilder.Entity("CRS.Models.CommonElement", b =>
                {
                    b.Navigation("ReserveStudyCommonElements");
                });

            modelBuilder.Entity("CRS.Models.Community", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("CRS.Models.ReserveStudy", b =>
                {
                    b.Navigation("ReserveStudyAdditionalElements");

                    b.Navigation("ReserveStudyBuildingElements");

                    b.Navigation("ReserveStudyCommonElements");
                });
#pragma warning restore 612, 618
        }
    }
}
