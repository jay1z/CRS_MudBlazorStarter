@page "/Contacts"
@using CRS.Data
@using CRS.Models
@using CRS.Services
@using CRS.Services.Interfaces
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IContactService ContactService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Contacts</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    <MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">
        <!-- Regular Contacts Tab -->
        <MudTabPanel Text="Contacts" Icon="@Icons.Material.Filled.ContactPhone">
            <MudPaper Elevation="0" Class="pa-4">
                <MudGrid>
                    <MudItem xs="8">
                        <MudText Typo="Typo.h4">Contacts</MudText>
                    </MudItem>
                    <MudItem xs="4" Class="d-flex justify-end">
                        <MudButton Variant="Variant.Filled"
                                   Color="Color.Primary"
                                   StartIcon="@Icons.Material.Filled.Add"
                                   Href="/Contacts/Create">
                            Add Contact
                        </MudButton>
                    </MudItem>
                </MudGrid>

                @if (isLoadingContacts) {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                }
                else {
                    <MudTextField @bind-Value="contactsSearchString"
                                  Placeholder="Search contacts..."
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Class="mt-3 mb-2" />

                    @if (!contacts.Any()) {
                        <MudAlert Severity="Severity.Info" Class="mt-3">No contacts found.</MudAlert>
                    }
                    else {
                        <MudTable Items="@filteredContacts" Dense="true" Hover="true" Bordered="false" Striped="true"
                                  Class="mt-3" Elevation="0">
                            <HeaderContent>
                                <MudTh>Name</MudTh>
                                <MudTh>Email</MudTh>
                                <MudTh>Phone</MudTh>
                                <MudTh Style="width: 120px">Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Name">
                                    <MudLink Href="@($"/Contacts/Details/{context.Id}")">
                                        @context.FirstName @context.LastName
                                    </MudLink>
                                </MudTd>
                                <MudTd DataLabel="Email">
                                    @if (!string.IsNullOrEmpty(context.Email)) {
                                        <MudLink Href="@($"mailto:{context.Email}")">@context.Email</MudLink>
                                    }
                                </MudTd>
                                <MudTd DataLabel="Phone">
                                    @if (!string.IsNullOrEmpty(context.Phone)) {
                                        <span>@context.Phone @(!string.IsNullOrEmpty(context.Extension) ? $" ext. {context.Extension}" : "")</span>
                                    }
                                </MudTd>
                                <MudTd>
                                    <div class="d-flex gap-2">
                                        <MudIconButton Icon="@Icons.Material.Filled.Visibility"
                                                       Size="Size.Small"
                                                       Color="Color.Primary"
                                                       Href="@($"/Contacts/Details/{context.Id}")"
                                                       Title="View Details" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                       Size="Size.Small"
                                                       Color="Color.Default"
                                                       Href="@($"/Contacts/Edit/{context.Id}")"
                                                       Title="Edit Contact" />
                                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                       Size="Size.Small"
                                                       Color="Color.Error"
                                                       OnClick="@(() => ConfirmDelete(context))"
                                                       Title="Delete Contact" />
                                    </div>
                                </MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                            </PagerContent>
                        </MudTable>
                    }
                }
            </MudPaper>
        </MudTabPanel>

        <!-- Service Contacts Tab -->
        <MudTabPanel Text="Service Contacts" Icon="@Icons.Material.Filled.HomeRepairService">
            <MudPaper Elevation="0" Class="pa-4">
                <MudGrid>
                    <MudItem xs="12">
                        <MudText Typo="Typo.h4">Service Contacts</MudText>
                        <MudText Typo="Typo.caption" Class="mt-1">
                            Service contacts are used for elements in reserve studies and can only be managed through those elements.
                        </MudText>
                    </MudItem>
                </MudGrid>

                @if (isLoadingServiceContacts) {
                    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-4" />
                }
                else {
                    <MudTextField @bind-Value="serviceContactsSearchString"
                                  Placeholder="Search service contacts..."
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search"
                                  IconSize="Size.Medium"
                                  Class="mt-3 mb-2" />

                    @if (!serviceContacts.Any()) {
                        <MudAlert Severity="Severity.Info" Class="mt-3">No service contacts found.</MudAlert>
                    }
                    else {
                        <MudTable Items="@filteredServiceContacts" Dense="true" Hover="true" Bordered="false" Striped="true"
                                  Class="mt-3" Elevation="0">
                            <HeaderContent>
                                <MudTh>Name</MudTh>
                                <MudTh>Company</MudTh>
                                <MudTh>Email</MudTh>
                                <MudTh>Phone</MudTh>
                                <MudTh Style="width: 80px">Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="Name">
                                    @context.FirstName @context.LastName
                                </MudTd>
                                <MudTd DataLabel="Company">
                                    @context.CompanyName
                                </MudTd>
                                <MudTd DataLabel="Email">
                                    @if (!string.IsNullOrEmpty(context.Email)) {
                                        <MudLink Href="@($"mailto:{context.Email}")">@context.Email</MudLink>
                                    }
                                </MudTd>
                                <MudTd DataLabel="Phone">
                                    @if (!string.IsNullOrEmpty(context.Phone)) {
                                        <span>@context.Phone @(!string.IsNullOrEmpty(context.Extension) ? $" ext. {context.Extension}" : "")</span>
                                    }
                                </MudTd>
                                <MudTd>
                                    <div class="d-flex gap-2">
                                        <MudTooltip Text="View Elements">
                                            <MudIconButton Icon="@Icons.Material.Filled.Assignment"
                                                           Size="Size.Small"
                                                           Color="Color.Info"
                                                           OnClick="@(() => ViewServiceContactElements(context.Id))"
                                                           Title="View Elements" />
                                        </MudTooltip>
                                    </div>
                                </MudTd>
                            </RowTemplate>
                            <PagerContent>
                                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                            </PagerContent>
                        </MudTable>
                    }
                }
            </MudPaper>
        </MudTabPanel>
    </MudTabs>
</MudContainer>

@code {
    // Regular contacts
    private List<Contact> contacts = new();
    private bool isLoadingContacts = true;
    private string contactsSearchString = "";

    // Service contacts
    private List<ServiceContact> serviceContacts = new();
    private bool isLoadingServiceContacts = true;
    private string serviceContactsSearchString = "";

    // Filtered collections
    private IEnumerable<Contact> filteredContacts => contacts
        .Where(c =>
            string.IsNullOrWhiteSpace(contactsSearchString) ||
            (c.FirstName?.Contains(contactsSearchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (c.LastName?.Contains(contactsSearchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (c.Email?.Contains(contactsSearchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (c.CompanyName?.Contains(contactsSearchString, StringComparison.OrdinalIgnoreCase) ?? false)
        );

    private IEnumerable<ServiceContact> filteredServiceContacts => serviceContacts
        .Where(c =>
            string.IsNullOrWhiteSpace(serviceContactsSearchString) ||
            (c.FirstName?.Contains(serviceContactsSearchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (c.LastName?.Contains(serviceContactsSearchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (c.Email?.Contains(serviceContactsSearchString, StringComparison.OrdinalIgnoreCase) ?? false) ||
            (c.CompanyName?.Contains(serviceContactsSearchString, StringComparison.OrdinalIgnoreCase) ?? false)
        );

    protected override async Task OnInitializedAsync() {
        try {
            // Start both loading operations
            var contactsTask = LoadContacts();
            var serviceContactsTask = LoadServiceContacts();

            // Wait for both to complete
            await Task.WhenAll(contactsTask, serviceContactsTask);
        }
        catch (Exception ex) {
            Snackbar.Add($"Error loading contacts: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadContacts() {
        try {
            await using var context = await DbFactory.CreateDbContextAsync();

            contacts = await context.Contacts
                .AsNoTracking()
                .Where(c => !c.DateDeleted.HasValue)
                .OrderBy(c => c.LastName)
                .ThenBy(c => c.FirstName)
                .AsSplitQuery()
                .ToListAsync();
        }
        catch (Exception ex) {
            Snackbar.Add($"Error loading contacts: {ex.Message}", Severity.Error);
        }
        finally {
            isLoadingContacts = false;
        }
    }

    private async Task LoadServiceContacts() {
        try {
            serviceContacts = await ContactService.GetServiceContactsAsync();
        }
        catch (Exception ex) {
            Snackbar.Add($"Error loading service contacts: {ex.Message}", Severity.Error);
        }
        finally {
            isLoadingServiceContacts = false;
        }
    }

    private async Task ConfirmDelete(Contact contact) {
        // var parameters = new DialogParameters
        //     {
        //     { "ContentText", $"Are you sure you want to delete contact '{contact.FirstName} {contact.LastName}'? This action cannot be undone." },
        //     { "ButtonText", "Delete" },
        //     { "Color", Color.Error }
        // };

        // var dialog = await DialogService.ShowAsync<MudBlazor.Dialog>("Confirm Delete", parameters);
        // var result = await dialog.Result;

        // if (!result.Canceled) {
        //     await DeleteContact(contact);
        // }
    }

    private async Task DeleteContact(Contact contact) {
        try {
            await using var context = await DbFactory.CreateDbContextAsync();

            var dbContact = await context.Contacts.FindAsync(contact.Id);
            if (dbContact != null) {
                // Soft delete
                dbContact.DateDeleted = DateTime.UtcNow;
                await context.SaveChangesAsync();

                // Remove from local list
                contacts.RemoveAll(c => c.Id == contact.Id);

                Snackbar.Add("Contact deleted successfully", Severity.Success);
                StateHasChanged();
            }
        }
        catch (Exception ex) {
            Snackbar.Add($"Error deleting contact: {ex.Message}", Severity.Error);
        }
    }

    private async Task ViewServiceContactElements(Guid serviceContactId) {
        // // This dialog would show the elements associated with this service contact
        // var parameters = new DialogParameters
        //     {
        //     { "ServiceContactId", serviceContactId }
        // };

        // var dialog = await DialogService.ShowAsync<MudBlazor.Dialog>("Elements Using This Service Contact", parameters);
        // await dialog.Result;

        // // No need to handle the result since this is just a view dialog
    }
}
