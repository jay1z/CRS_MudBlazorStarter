@page "/Communities/Details/{Id:guid}"
@attribute [Authorize]

@using CRS.Data
@using CRS.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserStateService UserState
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Community Details</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    @if (isLoading) {
        <MudPaper Elevation="0" Class="pa-8">
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.h5" Class="mt-4">Loading Community...</MudText>
        </MudPaper>
    }
    else if (!isAuthorized) {
        <MudAlert Severity="Severity.Error">You are not authorized to view this community.</MudAlert>
    }
    else if (community == null) {
        NavigationManager.NavigateTo("/Communities/NotFound");
    }
    else {
        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
            <MudText Typo="Typo.h4">@community.Name</MudText>
            <MudGrid>
                <!-- Aside Column -->
                <MudItem xs="12" lg="4">
                    <!-- Details Card -->
                    <MudCard Outlined="true" Class="mb-4">
                        <MudCardContent>
                            <MudText Typo="Typo.h6">Community ID</MudText>
                            <MudText Typo="Typo.body2">@community.Id</MudText>
                            <MudDivider Class="my-2" />
                            <MudText Typo="Typo.h6">Created</MudText>
                            <MudText Typo="Typo.body2">@community.DateCreated?.ToString("MM/dd/yyyy")</MudText>
                        </MudCardContent>
                    </MudCard>

                    <!-- Actions Card -->
                    <MudCard Outlined="true" Class="mb-4">
                        <MudCardContent>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="">Update Community</MudButton>
                        </MudCardContent>
                    </MudCard>
                </MudItem>

                <!-- Main Column -->
                <MudItem xs="12" lg="8">
                    <MudTabs Outlined="true" Color="Color.Primary">
                        <!-- Reserve Study List Tab -->
                        <MudTabPanel Text="Reserve Studies" Icon="@Icons.Material.Filled.Info">
                            <MudCard Outlined="true">
                                <MudCardContent Class="py-6">
                                    <MudDataGrid Items="@reserveStudies" Filterable="false" SortMode="@SortMode.None" Groupable="false">
                                        <Columns>
                                            <PropertyColumn Property="rs => rs.Id" />
                                            <PropertyColumn Property="rs => rs.PointOfContact.FullNameInverted" Title="Point Of Contact" />
                                            <PropertyColumn Property="rs => rs.PointOfContact.Email" Title="Email" />
                                            <PropertyColumn Property="rs => rs.Specialist.FullNameInverted" />
                                            <PropertyColumn Property="rs => rs.IsActive" Title="Active" />
                                            <TemplateColumn CellClass="d-flex justify-end">
                                                <CellTemplate>
                                                    <MudStack Row>
                                                        <MudButton Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">View</MudButton>
                                                    </MudStack>
                                                </CellTemplate>
                                            </TemplateColumn>
                                        </Columns>
                                    </MudDataGrid>
                                </MudCardContent>
                            </MudCard>
                        </MudTabPanel>
                    </MudTabs>
                </MudItem>
            </MudGrid>
        </MudContainer>
    }
</MudContainer>

@code {
    [Parameter]
    public Guid id { get; set; }

    private Community community;
    private List<ReserveStudy> reserveStudies;

    private bool isLoading = true;
    private bool isAuthorized = false;

    protected override async Task OnInitializedAsync() {
        try {
            //await UserState.InitializeAsync();
            using var context = await DbFactory.CreateDbContextAsync();
            community = context.Communities.AsNoTracking().FirstOrDefault(c => c.Id == id);
            if (community is not null) {
                reserveStudies = await context.ReserveStudies
                .AsNoTracking()
                .Include(rs => rs.Community)
                .Include(rs => rs.Contact)
                .Include(rs => rs.PropertyManager)
                .Include(rs => rs.Specialist)
                .AsSplitQuery()
                .Where(rs => rs.CommunityId == community.Id).ToListAsync();

                isAuthorized = UserState.ClaimsPrincipal.Identity.IsAuthenticated; // &&
                // (await UserManager.IsInRoleAsync(UserState.CurrentUser, "Admin") ||
                //      reserveStudy.ApplicationUserId == UserState.CurrentUser.Id ||
                //      reserveStudy.SpecialistUserId == UserState.CurrentUser.Id ||
                //      reserveStudy.PointOfContactType == ReserveStudy.PointOfContactTypeEnum.Contact && reserveStudy.Contact?.Email == UserState.CurrentUser.Email ||
                //      reserveStudy.PointOfContactType == ReserveStudy.PointOfContactTypeEnum.PropertyManager && reserveStudy.PropertyManager?.Email == UserState.CurrentUser.Email);
            }
        }
        catch (Exception ex) {
            Snackbar.Add($"Error loading community: {ex.Message}", Severity.Error);
        }
        finally {
            isLoading = false;
        }
    }
}
