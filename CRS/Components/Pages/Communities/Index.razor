@attribute [Authorize]
@page "/Communities"
@using CRS.Data
@using CRS.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject IDbContextFactory<CRS.Data.ApplicationDbContext> DbFactory
@inject UserStateService UserState
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<PageTitle>Communities</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (isLoading) {
        <MudPaper Elevation="0" Class="pa-8">
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.h5" Class="mt-4">Loading Communities...</MudText>
        </MudPaper>
    }
    else if (communities == null || !communities.Any()) {
        <MudAlert Severity="Severity.Info">
            <MudText Typo="Typo.body1">No communities found.</MudText>
        </MudAlert>
    }
    else {
        <MudCard Elevation="25">
            <MudCardHeader>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6" Class="mt-1">@communities.Count Active Communities</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" Class="d-flex justify-end align-center gap-2">
                        <MudTextField @bind-Value="searchString" Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" Class="mt-0" />
                    </MudItem>
                </MudGrid>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="@(FilteredCommunities)" Dense="true" Hover="true" Elevation="0" Loading="@isLoading" SortLabel="Sort by" Filter="@(community => FilterFunc(community, searchString))">
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel T="Community" SortBy="@(x => x.Name)">Name</MudTableSortLabel>
                        </MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">
                            <MudText Typo="Typo.h5" Class="fw-bold">@context.Name</MudText>
                        </MudTd>
                        <MudTd>
                            <MudButton Href="@($"Communities/Details/{context.Id}")" Size="Size.Small" Variant="Variant.Filled">
                                View
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                    <LoadingContent>
                        <MudText>Loading Communities...</MudText>
                    </LoadingContent>
                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>
@code {
    private List<ReserveStudy> reserveStudies;
    private List<Community> communities = new();
    private bool isLoading = true;
    private string searchString = "";

    protected override async Task OnInitializedAsync() {
        try {
            isLoading = true;

            await UserState.InitializeAsync();

            if (UserState.ClaimsPrincipal.Identity is not null && UserState.ClaimsPrincipal.Identity.IsAuthenticated) {
                LoadCommunities();
            }
            else {
                Snackbar.Add("User not authenticated.", Severity.Warning);
                return;
            }

        }
        catch (Exception ex) {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally {
            isLoading = false;
        }
    }

    private void LoadCommunities() {
        using var context = DbFactory.CreateDbContext();
        var query = context.ReserveStudies
            .AsNoTracking()
            .Include(rs => rs.Community)
            .AsSplitQuery();

        // Filter ReserveStudies based on user role and ownership
        reserveStudies = UserState.UserRoles.Contains("Admin")
            ? query.ToList()
            : UserState.UserRoles.Contains("Specialist")
                ? query.Where(rs => rs.SpecialistUserId == UserState.CurrentUser.Id).ToList()
                : UserState.UserRoles.Contains("User")
                    ? query.Where(rs => rs.ApplicationUserId == UserState.CurrentUser.Id).ToList()
                    : new List<ReserveStudy>();

        // Extract unique communities from the filtered ReserveStudies
        communities = reserveStudies
            .Where(rs => rs.Community != null)
            .Select(rs => rs.Community)
            .DistinctBy(c => c.Id)
            .ToList();
    }

    private IEnumerable<Community> FilteredCommunities => communities.Where(community => FilterFunc(community, searchString));

    private bool FilterFunc(Community community, string searchString) {
        if (string.IsNullOrWhiteSpace(searchString)) {
            return true;
        }

        searchString = searchString.Trim().ToLower();
        return community.Name?.ToLower().Contains(searchString) == true ||
            community.Addresses?.Any(address => address.Street?.ToLower().Contains(searchString) == true ||
                address.City?.ToLower().Contains(searchString) == true ||
                address.State?.ToLower().Contains(searchString) == true ||
                address.Zip?.ToLower().Contains(searchString) == true) == true;
    }
}
