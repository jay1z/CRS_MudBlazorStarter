@page "/Communities"
@attribute [Authorize]

@using CRS.Components.Pages.ReserveStudy.Dialogs
@using CRS.Data
@using CRS.Services
@using CRS.Services.Interfaces
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserStateService UserState
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject IReserveStudyService ReserveStudyService
@inject ICommunityService CommunityService
@inject IDialogService DialogService

<PageTitle>Communities</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (isLoading) {
        <MudPaper Elevation="0" Class="pa-8">
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.h5" Class="mt-4">Loading Communities...</MudText>
        </MudPaper>
    }
    else if (communities == null || !communities.Any()) {
        <MudAlert Severity="Severity.Warning">
            <MudText Typo="Typo.body1">No communities found.</MudText>
        </MudAlert>
    }
    else {
        <MudCard Elevation="0" Outlined="false">
            <MudCardHeader>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h5" Class="mb-4">My Communities</MudText>
                        <MudText Typo="Typo.h6" Color=Color.Primary Class="mt-1">@communities.Count Active Communities</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" Class="d-flex justify-end align-center gap-2">
                        <MudTextField @bind-Value="searchString" Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" Class="mt-0" />
                    </MudItem>
                </MudGrid>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="@(FilteredCommunities)" Dense="true" Hover="true" Elevation="0" Loading="@isLoading" SortLabel="Sort by">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel T="Community" SortBy="@(x => x.Name)">NAME</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="Community" SortBy="@(x => x.Addresses?.FirstOrDefault()?.Street)">STREET</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="Community" SortBy="@(x => x.Addresses?.FirstOrDefault()?.City)">CITY</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="Community" SortBy="@(x => x.Addresses?.FirstOrDefault()?.State)">STATE</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="Community" SortBy="@(x => x.Addresses?.FirstOrDefault()?.Zip)">ZIP</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="Community" SortBy="@(x => x.DateCreated)">Created</MudTableSortLabel></MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Name">
                            <MudText Typo="Typo.h5" Class="fw-bold">@context.Name</MudText>
                        </MudTd>
                        <MudTd DataLabel="Street">
                            @context.Addresses?.FirstOrDefault()?.Street
                        </MudTd>
                        <MudTd DataLabel="City">
                            @context.Addresses?.FirstOrDefault()?.City
                        </MudTd>
                        <MudTd DataLabel="State">
                            @context.Addresses?.FirstOrDefault()?.State
                        </MudTd>
                        <MudTd DataLabel="Zip">
                            @context.Addresses?.FirstOrDefault()?.Zip
                        </MudTd>
                        <MudTd DataLabel="Created">
                            @context.DateCreated.ToString()
                        </MudTd>
                        <MudTd>
                            <MudButton Href="@($"Communities/Details/{context.Id}")" Size="Size.Small" Variant="Variant.Filled">
                                View
                            </MudButton>
                            <MudButton OnClick="@(() => OpenDeleteDialog(context))" Size="Size.Small" Variant="Variant.Filled" Color="Color.Error">
                                Delete
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                    <LoadingContent>
                        <MudText>Loading Communities...</MudText>
                    </LoadingContent>
                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private List<Community> communities;
    private bool isLoading = true;
    private string searchString = "";

    protected override async Task OnParametersSetAsync() {
        await LoadData();
    }

    private async Task LoadData() {
        try {
            isLoading = true;

            await UserState.InitializeAsync();
            if (UserState.ClaimsPrincipal.Identity is not null && UserState.ClaimsPrincipal.Identity.IsAuthenticated) {
                await LoadCommunitiesAsync();
            }
            else {
                Snackbar.Add("User not authenticated.", Severity.Warning);
                return;
            }
        }
        catch (Exception ex) {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            communities = new List<Community>();
        }
        finally {
            isLoading = false;
        }
    }

    private async Task LoadCommunitiesAsync() {
        try {
            // Get communities using the service
            communities = await CommunityService.GetUserCommunitiesAsync(
                UserState.CurrentUser,
                UserState.UserRoles
            );
        }
        catch (DbUpdateConcurrencyException) {
            Snackbar.Add("Data has been modified by another user. Please refresh.", Severity.Warning);
        }
        catch (Exception ex) {
            Snackbar.Add($"Database error: {ex.Message}", Severity.Error);
            communities = new List<Community>();
        }
    }

    private IEnumerable<Community> FilteredCommunities =>
        CommunityService.FilterCommunities(communities, searchString);

    private async Task OpenDeleteDialog(Community community) {
        var parameters = new DialogParameters {
            { "Community", community }
        };

        var dialog = await DialogService.ShowAsync<DeleteCommunityDialog>("Delete Community", parameters);
        var result = await dialog.Result;

        if (!result.Canceled) {
            await DeleteCommunity(community);
        }
    }

    private async Task DeleteCommunity(Community community) {
        try {
            isLoading = true;
            await CommunityService.DeleteCommunityAsync(community.Id);

            // Remove the deleted community from the list
            communities.Remove(community);

            Snackbar.Add($"Community {community?.Name} was successfully deleted.", Severity.Success);
        }
        catch (Exception ex) {
            Snackbar.Add($"Error deleting community: {ex.Message}", Severity.Error);
        }
        finally {
            isLoading = false;
        }
    }
}
