@page "/users/manage"
@using CRS.Data
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer>
    @* <MudGrid>
        <MudItem xs="9">
            <MudTextField @bind-Value="searchValue" Label="Search Users..." Variant="Variant.Text"></MudTextField>
        </MudItem>
        <MudItem xs="3">
            <MudSelect T="IdentityRole" Label="Roles" MultiSelection="true" @bind-Value="_value" @bind-SelectedValues="roles">
                @foreach (var role in roles)
                {
                    <MudSelectItem T="IdentityRole" Value="@role">@role.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
    </MudGrid> *@
    <MudCard Elevation="0">
        <MudCardHeader>
            <MudText Typo="Typo.h5">Users</MudText>
        </MudCardHeader>
        <MudCardContent>
            <MudTable T="ApplicationUser" Items="users" Hover="true" Striped="true">
                <HeaderContent>
                    <MudTh>User Name</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Roles</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context.UserName</MudTd>
                    <MudTd>@context.Email</MudTd>
                    <MudTd>
                        @foreach (string role in context.Roles)
                        {
                            <MudChip T="string">@role</MudChip>
                        }
                    </MudTd>
                    <MudTd>@context.Status</MudTd>
                    <MudTd>
                        <MudIconButton Icon="@Icons.Material.Filled.GroupAdd" OnClick="() => OpenAddRoleToUserDialog(context)" />
                        <MudIconButton Icon="@Icons.Material.Filled.GroupRemove" OnClick="() => OpenRemoveRoleFromUserDialog(context)" />
                    </MudTd>
                </RowTemplate>
            </MudTable>
        </MudCardContent>
    </MudCard>
</MudContainer>


@code {
    private List<IdentityRole> roles = new();
    private List<ApplicationUser> users = new();
    private ApplicationUser selectedUser;
    private bool isAddRoleDialogVisible;
    public string searchValue { get; set; }
    private IdentityRole _value;
    private IEnumerable<IdentityRole> _options = new HashSet<IdentityRole>();

    protected override async Task OnInitializedAsync()
    {
        await LoadRoles();
        await LoadUsers();
    }

    private async Task LoadRoles()
    {
        roles = await RoleManager.Roles.ToListAsync();
    }

    private async Task LoadUsers()
    {
        users = await UserManager.Users.ToListAsync();
        foreach (var user in users)
        {
            user.Roles = await UserManager.GetRolesAsync(user);
        }
    }

    private Task OpenAddRoleToUserDialog(ApplicationUser user)
    {
        // isAddRoleDialogVisible = true;

        var parameters = new DialogParameters<AddUserToRoleDialog> { { x => x.User, user } };
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Large };
        return DialogService.ShowAsync<AddUserToRoleDialog>("Simple Dialog", parameters, options);

    }
    private void OpenRemoveRoleFromUserDialog(ApplicationUser user)
    {
        // Logic to open Remove Role from User dialog
        Snackbar.Add($"OpenRemoveRoleFromUserDialog for {user.UserName}", Severity.Success);
    }

}
