@namespace CRS.Components.Pages.ReserveStudyPages.Steps

@using CRS.Data
@using CRS.Services
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@inherits OwningComponentBase
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserStateService UserState

<MudForm Model="Model" @ref="form">
    <MudGrid>
        <!-- Header Section -->
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Class="mb-4">Community Details</MudText>
            <MudText Typo="Typo.body2" Class="text-muted">
                If you need more info, please check out the
                <MudLink Href="#" Class="link-primary fw-bold">Help Page</MudLink>.
            </MudText>
        </MudItem>

        <!-- Community Selection Type -->
        <MudItem xs="12">
            <MudRadioGroup ValueChanged="@((bool val) => OnCommunityTypeChanged(val))">
                <MudRadio Value="false" Color="Color.Primary">Create New Community</MudRadio>
                <MudRadio Value="true" Color="Color.Primary">Select Existing Community</MudRadio>
            </MudRadioGroup>
        </MudItem>

        @if (useExistingCommunity) {
            <!-- Existing Community Selector -->
            <MudItem xs="12">
                <MudSelect T="Community" Label="Select Community" @bind-Value="selectedCommunity" Required="true" AdornmentIcon="@Icons.Material.TwoTone.LocationCity"
                           For="@(() => selectedCommunity)" SelectedValuesChanged="@OnExistingCommunitySelected">
                    @foreach (var community in existingCommunities) {
                        <MudSelectItem Value="@community">
                            @($"{community.Name} - {community.Addresses?.FirstOrDefault()?.City}, {community.Addresses?.FirstOrDefault()?.State}")
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        }
        else {
            <!-- New Community Form -->
            <MudItem xs="12">
                <MudTextField @bind-Value="Model.Community.Name"
                              Label="Community Name"
                              Required="true"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.TwoTone.LocationCity"
                              Immediate="true" />
            </MudItem>

            <!-- PHYSICAL ADDRESS SECTION -->
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Class="mb-2 mt-2">Physical Address</MudText>
            </MudItem>

            <!-- Street Address -->
            <MudItem xs="12">
                <MudTextField @bind-Value="Model.Community.Addresses[0].Street"
                              Label="Street Address"
                              Required="true"
                              Adornment="Adornment.Start"
                              AdornmentIcon="@Icons.Material.TwoTone.EditRoad"
                              Immediate="true" />
            </MudItem>

            <!-- State, City, Zip -->
            <MudItem xs="12">
                <MudGrid>
                    <!-- State -->
                    <MudItem xs="12" sm="4">
                        <MudSelect @bind-Value="Model.Community.Addresses[0].State"
                                   Label="State"
                                   Required="true"
                                   Immediate="true">
                            @foreach (var state in States) {
                                <MudSelectItem Value="@state">@state</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <!-- City -->
                    <MudItem xs="12" sm="5">
                        <MudTextField @bind-Value="Model.Community.Addresses[0].City"
                                      Label="City"
                                      Required="true"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.TwoTone.LocationOn"
                                      Immediate="true" />
                    </MudItem>

                    <!-- Zip Code -->
                    <MudItem xs="12" sm="3">
                        <MudTextField @bind-Value="Model.Community.Addresses[0].Zip"
                                      Label="Zip Code"
                                      Required="true"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.TwoTone.Mail"
                                      Immediate="true" />
                    </MudItem>
                </MudGrid>
            </MudItem>

            <!-- Mailing Address Checkbox -->
            <MudItem xs="12" Class="mt-4">
                <MudCheckBox @bind-Value="usePhysicalAsMailingAddress"
                             Label="Use physical address as mailing address"
                             Color="Color.Primary"
                             CheckedChanged="OnMailingAddressCheckChanged" />
            </MudItem>

            <!-- MAILING ADDRESS SECTION - displays only when checkbox is unchecked -->
            @if (!usePhysicalAsMailingAddress) {
                <MudItem xs="12">
                    <MudText Typo="Typo.h6" Class="mb-2 mt-2">Mailing Address</MudText>
                </MudItem>

                <!-- Street Address -->
                <MudItem xs="12">
                    <MudTextField @bind-Value="mailingAddress.Street"
                                  Label="Street Address"
                                  Required="true"
                                  Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.TwoTone.EditRoad"
                                  Immediate="true" />
                </MudItem>

                <!-- State, City, Zip -->
                <MudItem xs="12">
                    <MudGrid>
                        <!-- State -->
                        <MudItem xs="12" sm="4">
                            <MudSelect @bind-Value="mailingAddress.State"
                                       Label="State"
                                       Required="true"
                                       Immediate="true">
                                @foreach (var state in States) {
                                    <MudSelectItem Value="@state">@state</MudSelectItem>
                                }
                            </MudSelect>
                        </MudItem>

                        <!-- City -->
                        <MudItem xs="12" sm="5">
                            <MudTextField @bind-Value="mailingAddress.City"
                                          Label="City"
                                          Required="true"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.TwoTone.LocationOn"
                                          Immediate="true" />
                        </MudItem>

                        <!-- Zip Code -->
                        <MudItem xs="12" sm="3">
                            <MudTextField @bind-Value="mailingAddress.Zip"
                                          Label="Zip Code"
                                          Required="true"
                                          Adornment="Adornment.Start"
                                          AdornmentIcon="@Icons.Material.TwoTone.Mail"
                                          Immediate="true" />
                        </MudItem>
                    </MudGrid>
                </MudItem>
            }

            <MudItem xs="12" sm="6">
                <MudDatePicker @bind-Date="Model.Community.AnnualMeetingDate" Label="Annual Meeting Date" Placeholder="Select annual meeting date (if known)" Variant="Variant.Outlined" />
            </MudItem>
        }
    </MudGrid>
</MudForm>

@code {
    [Parameter]
    public ReserveStudy Model { get; set; }

    [Parameter]
    public EventCallback<bool> OnExistingCommunityChanged { get; set; }

    private MudForm form;
    private bool useExistingCommunity;
    private Community selectedCommunity;
    private List<Community> existingCommunities = new();
    private bool usePhysicalAsMailingAddress = true; // Default to using physical as mailing address
    private Address mailingAddress = new Address { IsMailingAddress = true };

    private List<string> States = new() {
        "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA", "HI", "ID",
        "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD", "MA", "MI", "MN", "MS",
        "MO", "MT", "NE", "NV", "NH", "NJ", "NM", "NY", "NC", "ND", "OH", "OK",
        "OR", "PA", "RI", "SC", "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV",
        "WI", "WY"
    };

    [Parameter]
    public EventCallback<bool> StepValidated { get; set; }

    protected override async Task OnInitializedAsync() {
        await LoadUserCommunities();
    }

    private async Task LoadUserCommunities() {
        using var context = await DbFactory.CreateDbContextAsync();
        existingCommunities = await context.Communities
            .Include(c => c.Addresses) // Include addresses
            .AsNoTracking()
            .Where(c => context.ReserveStudies
                .Any(rs => rs.Community.Id == c.Id && rs.ApplicationUserId == UserState.CurrentUser.Id))
            .ToListAsync();
    }

    protected override async Task OnParametersSetAsync() {
        // Ensure Addresses collection is initialized
        if (Model.Community.Addresses == null || !Model.Community.Addresses.Any()) {
            Model.Community.Addresses = new List<Address> { new Address() };
        }
        await base.OnParametersSetAsync();
    }

    private async Task OnCommunityTypeChanged(bool useExisting) {
        useExistingCommunity = useExisting;
        if (!useExisting) {
            selectedCommunity = null;
            Model.Community = new Community { };
            // Reset mailing address options
            usePhysicalAsMailingAddress = true;
            mailingAddress = new Address { IsMailingAddress = true };
        }
        await OnExistingCommunityChanged.InvokeAsync(IsExistingCommunity());
    }

    private void OnExistingCommunitySelected() {
        if (selectedCommunity != null) {
            Model.Community = selectedCommunity;
        }
    }

    private void OnMailingAddressCheckChanged(bool isChecked) {
        usePhysicalAsMailingAddress = isChecked;

        if (isChecked) {
            // If using physical as mailing, remove any separate mailing address
            Model.Community.Addresses = Model.Community.Addresses
                .Where(a => !a.IsMailingAddress)
                .ToList();

            // Mark first address as mailing address too
            if (Model.Community.Addresses.Any()) {
                Model.Community.Addresses[0].IsMailingAddress = true;
            }
        }
        else {
            // If not using physical as mailing, add mailing address to collection
            // and mark physical address as not a mailing address
            if (Model.Community.Addresses.Any()) {
                Model.Community.Addresses[0].IsMailingAddress = false;
            }

            // Add mailing address if it doesn't exist
            if (!Model.Community.Addresses.Any(a => a.IsMailingAddress)) {
                Model.Community.Addresses.Add(mailingAddress);
            }
        }
    }

    public bool IsExistingCommunity() {
        return useExistingCommunity;
    }

    public async Task<bool> ValidateAsync() {
        await form.Validate();
        bool valid = form.IsValid;

        // Update the addresses collection before validating
        if (!useExistingCommunity && !usePhysicalAsMailingAddress) {
            // Make sure the mailing address is in the collection
            if (!Model.Community.Addresses.Any(a => a.IsMailingAddress)) {
                Model.Community.Addresses.Add(mailingAddress);
            }
        }

        await StepValidated.InvokeAsync(valid);
        return valid;
    }
}
