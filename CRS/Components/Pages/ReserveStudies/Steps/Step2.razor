@namespace CRS.Components.Pages.ReserveStudyPages.Steps

@using MudBlazor
@using CRS.Data
@using CRS.Models
@using CRS.Services
@using CRS.Services.Interfaces
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject IContactService ContactService
@inject UserStateService UserState

<MudForm Model="Model" @ref="form">
    <MudGrid>
        <!-- Board Member Contact Section -->
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Class="mb-4">Board Member Contact</MudText>
        </MudItem>

        <!-- Contact Selection Type -->
        <MudItem xs="12">
            <MudRadioGroup ValueChanged="@((bool val) => OnContactTypeChanged(val))">
                <MudRadio Value="false" Color="Color.Primary">Enter New Contact</MudRadio>
                <MudRadio Value="true" Color="Color.Primary">Select Existing Contact</MudRadio>
            </MudRadioGroup>
        </MudItem>

        @if (useExistingContact) {
            <!-- Existing Contact Selector -->
            <MudItem xs="12">
                <MudSelect T="Contact" Label="Select Contact" @bind-Value="selectedContact" Required="true" AdornmentIcon="@Icons.Material.TwoTone.ContactPhone"
                           For="@(() => selectedContact)" SelectedValuesChanged="@OnExistingContactSelected">
                    @foreach (var contact in existingContacts) {
                        <MudSelectItem Value="@contact">
                            @($"{contact.FirstName} {contact.LastName} - {contact.Email}")
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        }
        else {
            <!-- First Name and Last Name -->
            <MudItem xs="12">
                <MudGrid>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="Model.Contact.FirstName" Label="First Name" Required="true" Immediate="true" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="Model.Contact.LastName" Label="Last Name" Required="true" Immediate="true" />
                    </MudItem>
                </MudGrid>
            </MudItem>

            <!-- Email -->
            <MudItem xs="12">
                <MudTextField @bind-Value="Model.Contact.Email" Label="Email" Required="true" Immediate="true" />
            </MudItem>

            <!-- Phone and Extension -->
            <MudItem xs="12">
                <MudGrid>
                    <MudItem xs="5">
                        <MudTextField @bind-Value="Model.Contact.Phone" Label="Phone" Required="true" Immediate="true" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudTextField @bind-Value="Model.Contact.Extension" Label="Extension" Immediate="true" />
                    </MudItem>
                </MudGrid>
            </MudItem>
        }

        <!-- Property Manager Section -->
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Class="mb-4">Property Manager Contact</MudText>
        </MudItem>

        <!-- Property Manager Selection Type -->
        <MudItem xs="12">
            <MudRadioGroup ValueChanged="@((bool val) => OnPropertyManagerTypeChanged(val))">
                <MudRadio Value="false" Color="Color.Primary">Enter New Property Manager</MudRadio>
                <MudRadio Value="true" Color="Color.Primary">Select Existing Property Manager</MudRadio>
            </MudRadioGroup>
        </MudItem>

        @if (useExistingPropertyManager) {
            <!-- Existing Property Manager Selector -->
            <MudItem xs="12">
                <MudSelect T="PropertyManager" Label="Select Property Manager" @bind-Value="selectedPropertyManager" Required="true" AdornmentIcon="@Icons.Material.TwoTone.Business"
                           For="@(() => selectedPropertyManager)" SelectedValuesChanged="@OnExistingPropertyManagerSelected">
                    @foreach (var propertyManager in existingPropertyManagers) {
                        <MudSelectItem Value="@propertyManager">
                            @($"{propertyManager.CompanyName} - {propertyManager.FirstName} {propertyManager.LastName}")
                        </MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        }
        else {
            <!-- First Name and Last Name -->
            <MudItem xs="12">
                <MudGrid>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="Model.PropertyManager.FirstName" Label="First Name" Required="true" Immediate="true" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField @bind-Value="Model.PropertyManager.LastName" Label="Last Name" Required="true" Immediate="true" />
                    </MudItem>
                </MudGrid>
            </MudItem>

            <!-- Company Name -->
            <MudItem xs="12">
                <MudTextField @bind-Value="Model.PropertyManager.CompanyName" Label="Company Name" Required="true" Immediate="true" />
            </MudItem>

            <!-- Email -->
            <MudItem xs="12">
                <MudTextField @bind-Value="Model.PropertyManager.Email" Label="Email" Required="true" Immediate="true" />
            </MudItem>

            <!-- Phone and Extension -->
            <MudItem xs="12">
                <MudGrid>
                    <MudItem xs="5">
                        <MudTextField @bind-Value="Model.PropertyManager.Phone" Label="Phone" Required="true" Immediate="true" />
                    </MudItem>
                    <MudItem xs="3">
                        <MudTextField @bind-Value="Model.PropertyManager.Extension" Label="Extension" Immediate="true" />
                    </MudItem>
                </MudGrid>
            </MudItem>
        }

        <!-- Preferred Point of Contact -->
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Class="mb-4">Preferred Point of Contact</MudText>
            <MudRadioGroup @bind-Value="Model.PointOfContactType">
                <MudRadio Value="ReserveStudy.PointOfContactTypeEnum.Contact" Label="Contact" />
                <MudRadio Value="ReserveStudy.PointOfContactTypeEnum.PropertyManager" Label="Property Manager" />
            </MudRadioGroup>
        </MudItem>
    </MudGrid>
</MudForm>

@code {
    [Parameter]
    public ReserveStudy Model { get; set; }

    [Parameter]
    public EventCallback<bool> StepValidated { get; set; }

    [Parameter]
    public EventCallback<bool> OnExistingContactChanged { get; set; }

    private MudForm form;
    private bool useExistingContact;
    private bool useExistingPropertyManager;
    private Contact selectedContact;
    private PropertyManager selectedPropertyManager;
    private List<Contact> existingContacts = new();
    private List<PropertyManager> existingPropertyManagers = new();

    protected override async Task OnInitializedAsync() {
        await LoadUserContacts();
        await LoadUserPropertyManagers();
    }

    private async Task LoadUserContacts() {
        try {
            await UserState.InitializeAsync();
            var userId = UserState.CurrentUser?.Id.ToString();

            if (!string.IsNullOrEmpty(userId)) {
                existingContacts = await ContactService.GetUserContactsAsync(userId);
            }
        }
        catch (Exception) {
            // Handle or log errors as needed
            existingContacts = new List<Contact>();
        }
    }

    private async Task LoadUserPropertyManagers() {
        try {
            using var context = await DbFactory.CreateDbContextAsync();
            existingPropertyManagers = await context.PropertyManagers
                .AsNoTracking()
                .Where(pm => !pm.DateDeleted.HasValue)
                .ToListAsync();
        }
        catch (Exception) {
            // Handle or log errors as needed
            existingPropertyManagers = new List<PropertyManager>();
        }
    }

    private async Task OnContactTypeChanged(bool useExisting) {
        useExistingContact = useExisting;
        if (!useExisting) {
            selectedContact = null;
            Model.Contact = new Contact();
        }
        await OnExistingContactChanged.InvokeAsync(useExistingContact);
    }

    private void OnExistingContactSelected() {
        if (selectedContact != null) {
            Model.Contact = selectedContact;
            Model.ContactId = selectedContact.Id;
        }
    }

    private async Task OnPropertyManagerTypeChanged(bool useExisting) {
        useExistingPropertyManager = useExisting;
        if (!useExisting) {
            selectedPropertyManager = null;
            Model.PropertyManager = new PropertyManager();
        }
        await OnExistingContactChanged.InvokeAsync(useExistingPropertyManager);
    }

    private void OnExistingPropertyManagerSelected() {
        if (selectedPropertyManager != null) {
            Model.PropertyManager = selectedPropertyManager;
            Model.PropertyManagerId = selectedPropertyManager.Id;
        }
    }

    public async Task<bool> ValidateAsync() {
        await form.Validate();
        bool valid = form.IsValid;
        await StepValidated.InvokeAsync(valid);
        return valid;
    }
}
