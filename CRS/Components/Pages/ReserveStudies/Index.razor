@page "/ReserveStudies"
@attribute [Authorize]

@using CRS.Components.Pages.ReserveStudy.Dialogs
@using CRS.Data
@using CRS.Services
@using CRS.Services.Interfaces
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<CRS.Data.ApplicationDbContext> DbFactory
@inject UserStateService UserState
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar
@inject IReserveStudyService ReserveStudyService
@inject IDialogService DialogService

<PageTitle>Active Studies</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (isLoading) {
        <MudPaper Elevation="0" Class="pa-8">
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.h5" Class="mt-4">Loading Reserve Studies...</MudText>
        </MudPaper>
    }
    else if (reserveStudies == null || !reserveStudies.Any()) {
        <MudAlert Severity="Severity.Warning">
            <MudText Typo="Typo.body1">No reserve studies found.</MudText>
        </MudAlert>
    }
    else {
        <MudCard Elevation="0" Outlined="false">
            <MudCardHeader>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h5" Class="mb-4">My Requests</MudText>
                        <MudText Typo="Typo.h6" Color=Color.Primary Class="mt-1">@reserveStudies.Count Active Studies</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" Class="d-flex justify-end align-center gap-2">
                        <MudTextField @bind-Value="searchString" Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" Class="mt-0" />
                    </MudItem>
                </MudGrid>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="@(FilteredStudies)"
                          Dense="true"
                          Hover="true"
                          Elevation="0"
                          Loading="@isLoading"
                          SortLabel="Sort by"
                          Filter="@(study => FilterFunc(study, searchString))">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel T="ReserveStudy" SortBy="@(x => x.Community.Name)">COMMUNITY</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="ReserveStudy" SortBy="@(x => x.PointOfContact.FullNameInverted)">CONTACT</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="ReserveStudy" SortBy="@(x => x.PointOfContact.Email)">EMAIL</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="ReserveStudy" SortBy="@(x => x.PointOfContact.Phone)">PHONE</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="ReserveStudy" SortBy="@(x => x.Specialist.FullName)">SPECIALIST</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="ReserveStudy" SortBy="@(x => x.DateCreated)">CREATED</MudTableSortLabel></MudTh>
                        <MudTh>ACTIONS</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Community">
                            <MudText Typo="Typo.h5" Class="fw-bold">@context.Community.Name</MudText>
                        </MudTd>
                        <MudTd DataLabel="Contact">
                            <MudText Typo="Typo.body1">@context.PointOfContact?.FullNameInverted</MudText>
                            <MudText Typo="Typo.caption">@context.PointOfContact?.CompanyName</MudText>
                        </MudTd>
                        <MudTd DataLabel="Email">
                            <MudLink Href="@($"mailto:{context.PointOfContact?.Email}")">@context.PointOfContact?.Email</MudLink>
                        </MudTd>
                        <MudTd DataLabel="Phone">
                            <MudText Typo="Typo.body1">@context.PointOfContact?.Phone
                            @if (!string.IsNullOrEmpty(context.PointOfContact?.Extension)) {
                                <MudText Typo="Typo.caption">@($" x{context.PointOfContact?.Extension}")</MudText>
                            }
                            </MudText>
                        </MudTd>
                        <MudTd DataLabel="Specialist">
                            <MudText Typo="Typo.body1">@context.Specialist?.FullName</MudText>
                            <MudText Typo="Typo.caption">@context.Specialist?.Email</MudText>
                        </MudTd>
                        <MudTd DataLabel="Created">
                            <MudText Typo="Typo.body1">@($"{context.DateCreated?.ToShortDateString()} {context.DateCreated?.ToShortTimeString()}")</MudText>
                        </MudTd>
                        <MudTd>
                            <MudStack Row>
                                <MudButton Href="@($"ReserveStudies/{context.Id}/Details")" Size="Size.Small" Variant="Variant.Filled">
                                    View
                                </MudButton>
                                <MudButton OnClick="@(() => OpenDeleteDialog(context))" Size="Size.Small" Variant="Variant.Filled" Color="Color.Error">
                                    Delete
                                </MudButton>
                            </MudStack>
                        </MudTd>
                    </RowTemplate>
                    <LoadingContent>
                        <MudText>Loading studies...</MudText>
                    </LoadingContent>
                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private List<ReserveStudy> reserveStudies;
    private bool isLoading = true;
    private string searchString = "";

    protected override async Task OnParametersSetAsync() {
        await LoadData();
    }

    private async Task LoadData() {
        try {
            isLoading = true;

            await UserState.InitializeAsync();
            if (UserState.ClaimsPrincipal.Identity is not null && UserState.ClaimsPrincipal.Identity.IsAuthenticated) {
                await LoadReserveStudies();
            }
            else {
                Snackbar.Add("User not authenticated.", Severity.Warning);
            }
        }
        catch (Exception ex) {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            reserveStudies = new List<ReserveStudy>();
        }
        finally {
            isLoading = false;
        }
    }

    private async Task LoadReserveStudies() {
        try {
            await UserState.InitializeAsync();
            if (UserState.UserRoles != null) {
                if (UserState.UserRoles.Contains("Admin")) {
                    reserveStudies = await ReserveStudyService.GetAllReserveStudiesAsync();
                }
                else if (UserState.UserRoles.Contains("Specialist")) {
                    reserveStudies = await ReserveStudyService.GetAssignedReserveStudiesAsync(UserState.CurrentUser.Id);
                }
                else if (UserState.UserRoles.Contains("User")) {
                    reserveStudies = await ReserveStudyService.GetOwnedReserveStudiesAsync(UserState.CurrentUser.Id);
                }
                else {
                    reserveStudies = new List<ReserveStudy>();
                }
            }
            else {
                Snackbar.Add("Unable to determine user permissions. Please log out and log back in.", Severity.Warning);
            }
        }
        catch (Exception ex) {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            reserveStudies = new List<ReserveStudy>();
        }
    }

    private IEnumerable<ReserveStudy> FilteredStudies => reserveStudies.Where(study => FilterFunc(study, searchString));
    private bool FilterFunc(ReserveStudy study, string searchString) {
        if (string.IsNullOrWhiteSpace(searchString)) {
            return true;
        }

        searchString = searchString.Trim().ToLower();
        return study.Community?.Name?.ToLower().Contains(searchString) == true ||
               study.PointOfContact?.FullName?.ToLower().Contains(searchString) == true ||
               study.PointOfContact?.Email?.ToLower().Contains(searchString) == true ||
               study.Specialist?.FullName?.ToLower().Contains(searchString) == true;
    }

    private async Task OpenDeleteDialog(ReserveStudy study) {
        var parameters = new DialogParameters {
            { "Study", study }
        };

        var dialog = await DialogService.ShowAsync<DeleteReserveStudyDialog>("Delete Reserve Study", parameters);
        var result = await dialog.Result;

        if (!result.Canceled) {
            await DeleteReserveStudy(study);
        }
    }

    private async Task DeleteReserveStudy(ReserveStudy study) {
        try {
            isLoading = true;
            await ReserveStudyService.DeleteReserveStudyAsync(study.Id);

            // Remove the deleted study from the list
            reserveStudies.Remove(study);

            Snackbar.Add($"Reserve study for {study.Community?.Name} was successfully deleted.", Severity.Success);
        }
        catch (Exception ex) {
            Snackbar.Add($"Error deleting reserve study: {ex.Message}", Severity.Error);
        }
        finally {
            isLoading = false;
        }
    }
}
