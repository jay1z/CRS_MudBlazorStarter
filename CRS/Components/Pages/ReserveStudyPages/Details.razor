@page "/ReserveStudies/Details/{Id:guid}"
@attribute [Authorize]

@using CRS.Data
@using CRS.Services
@using CRS.Services.Email
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization

@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserStateService UserState
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IEmailService EmailService

<PageTitle>Reserve Study Details</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    @if (isLoading) {
        <MudPaper Elevation="0" Class="pa-8">
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.h5" Class="mt-4">Loading Reserve Study...</MudText>
        </MudPaper>
    }
    else if (reserveStudy == null) {
        NavigationManager.NavigateTo("/ReserveStudies/notfound");
    }
    else {
        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
            <MudText Typo="Typo.h4">@reserveStudy.Community?.Name</MudText>
            <MudGrid>
                <!-- Aside Column -->
                <MudItem xs="12" lg="4">
                    <!-- Details Card -->
                    <MudCard Elevation="0" Outlined="true" Class="mb-4">
                        <MudCardContent>
                            <MudText Typo="Typo.h6">Request ID</MudText>
                            <MudText Typo="Typo.body2">@reserveStudy.Id</MudText>
                            <MudDivider Class="my-2" />
                            <MudText Typo="Typo.h6">Created</MudText>
                            <MudText Typo="Typo.body2">@reserveStudy.DateCreated?.ToString("MM/dd/yyyy")</MudText>
                        </MudCardContent>
                    </MudCard>

                    <!-- Community Card -->
                    <MudCard Elevation="0" Outlined="true" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@reserveStudy.Community.Name</MudText>
                                <MudText Typo="Typo.body1">@reserveStudy.Community.Addresses[0].FullAddress</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/Communities/Details/{@reserveStudy.Community.Id}")">View Community</MudButton>
                        </MudCardContent>
                    </MudCard>

                    <!-- Specialist Card -->
                    <MudCard Elevation="0" Outlined="true" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Reserve Specialist</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body1">@reserveStudy.Specialist?.FullName</MudText>
                            <MudLink Href="@($"mailto:{reserveStudy.Specialist?.Email}")">@(reserveStudy.Specialist?.Email ?? "Not Assigned")</MudLink>
                        </MudCardContent>
                    </MudCard>

                    <!-- Actions Card -->
                    <MudCard Elevation="0" Outlined="true" Class="mb-4">
                        <MudCardContent>
                            <MudStack>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@GetUpdateLink()">Update Request</MudButton>
                                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Class="mx-4" OnClick="SendRequestLink">Send Request Link</MudButton>
                                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Class="mx-4" OnClick="SendAccessTokenLink">Send Access Token Link</MudButton>
                            </MudStack>
                        </MudCardContent>
                    </MudCard>

                    @if (reserveStudy.DateCreated.HasValue && (DateTime.Now - reserveStudy.DateCreated.Value).TotalDays > 30 && !reserveStudy.IsComplete) {
                        <MudAlert Severity="Severity.Warning" Elevation="25">
                            <MudText Typo="Typo.h6" Class="text-gray-900 fw-bold">Attention!</MudText>
                            <MudText Typo="Typo.body2" Class="text-gray-700">
                                This request has been pending for more than
                                <MudText Color="Color.Primary" Typo="Typo.body2" Class="fw-bold">@((DateTime.Now - reserveStudy.DateCreated.Value).TotalDays.ToString("N0")) days</MudText>
                            </MudText>
                        </MudAlert>
                    }
                </MudItem>

                <!-- Main Column -->
                <MudItem xs="12" lg="8">
                    <MudTabs Elevation="0" Outlined="true" Color="Color.Primary">
                        <!-- Information Tab -->
                        <MudTabPanel Text="Information" Icon="@Icons.Material.Filled.Info">
                            <MudCard Elevation="25">
                                <MudCardContent Class="py-6">
                                    <MudGrid>
                                        <!-- Contact Information -->
                                        <MudItem xs="12">
                                            <MudText Typo="Typo.h6" Color="Color.Primary">Contact</MudText>
                                        </MudItem>
                                        <MudItem xs="4">
                                            <MudText Typo="Typo.caption">Name</MudText>
                                            <MudText Typo="Typo.body1">@reserveStudy.Contact?.FullNameInverted</MudText>
                                        </MudItem>
                                        <MudItem xs="4">
                                            <MudText Typo="Typo.caption">Phone</MudText>
                                            <MudText Typo="Typo.body1">@reserveStudy.Contact?.Phone</MudText>
                                            <MudText Typo="Typo.caption">@reserveStudy.Contact?.Extension</MudText>
                                        </MudItem>
                                        <MudItem xs="4">
                                            <MudText Typo="Typo.caption">Email</MudText>
                                            <MudFlexBreak />
                                            <MudLink Href="@($"mailto:{reserveStudy.Contact?.Email}")" Typo="Typo.body1">
                                                @reserveStudy.Contact?.Email
                                            </MudLink>
                                        </MudItem>
                                        <!-- Property Manager Information -->
                                        @if (reserveStudy.PropertyManager != null) {
                                            <MudItem xs="12" Class="mt-4">
                                                <MudText Typo="Typo.h6" Color="Color.Primary">Management Company</MudText>
                                            </MudItem>
                                            <MudItem xs="12">
                                                <MudText Typo="Typo.caption">Company Name</MudText>
                                                <MudText Typo="Typo.body1">@reserveStudy.PropertyManager.CompanyName</MudText>
                                            </MudItem>
                                            <MudItem xs="4">
                                                <MudText Typo="Typo.caption">Property Manager</MudText>
                                                <MudText Typo="Typo.body1">@reserveStudy.PropertyManager.FullNameInverted</MudText>
                                            </MudItem>
                                            <MudItem xs="4">
                                                <MudText Typo="Typo.caption">Phone</MudText>
                                                <MudText Typo="Typo.body1">@reserveStudy.PropertyManager.Phone</MudText>
                                                <MudText Typo="Typo.caption">@reserveStudy.PropertyManager?.Extension</MudText>
                                            </MudItem>
                                            <MudItem xs="4">
                                                <MudText Typo="Typo.caption">Email</MudText>
                                                <MudFlexBreak />
                                                <MudLink Href="@($"mailto:{reserveStudy.PropertyManager?.Email}")" Typo="Typo.body1">
                                                    @reserveStudy.PropertyManager?.Email
                                                </MudLink>
                                            </MudItem>
                                        }
                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </MudTabPanel>
                        <!-- Elements Tab -->
                        <MudTabPanel Text="Elements" Icon="@Icons.Material.Filled.List">
                            @if (reserveStudy.ReserveStudyElements.Any()) {
                                <MudCard Elevation="25">
                                    <MudCardContent Class="py-6">
                                        <MudTable Dense="true" Hover="true" Elevation="0" Items="@reserveStudy.ReserveStudyElements"
                                                  GroupBy="@_groupDefinition"
                                                  GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
                                                  GroupFooterClass="mb-4">
                                            <ColGroup>
                                                <col style="width:10%;" />
                                                <col style="width:50%;" />
                                                <col style="width:20%;" />
                                                <col style="width:20%;" />
                                            </ColGroup>
                                            <HeaderContent>
                                                <MudTh></MudTh>
                                                <MudTh>Name</MudTh>
                                                <MudTh>Needs Service</MudTh>
                                                <MudTh class="text-end">Amount</MudTh>
                                            </HeaderContent>
                                            <GroupHeaderTemplate Context="headerContext">
                                                <MudTh colspan="4">@GetGroupName(headerContext)</MudTh>
                                            </GroupHeaderTemplate>
                                            <RowTemplate Context="rowContext">
                                                <MudTd>
                                                    <MudIconButton Icon="@((rowContext.ShowDetails == true) ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)" OnClick="@(() => ShowElement(rowContext))" />
                                                </MudTd>
                                                <MudTd>
                                                    <MudText Typo="Typo.body1">@rowContext.Name</MudText>
                                                </MudTd>
                                                <MudTd>
                                                    <MudCheckBox T="bool" Value="rowContext.NeedsService" Color="Color.Success" UncheckedColor="Color.Error" ReadOnly="true" />
                                                </MudTd>
                                                <MudTd class="text-end">
                                                    <MudText Typo="Typo.body1">@rowContext.Count</MudText>
                                                </MudTd>
                                            </RowTemplate>
                                            <ChildRowContent Context="childContext">
                                                @if (childContext.ShowDetails) {
                                                    <MudTd colspan="4">
                                                        <MudGrid>
                                                            <MudItem xs="3">
                                                                <MudText Typo="Typo.caption">Measurement Type</MudText>
                                                                <MudText Typo="Typo.body1">@childContext.ElementMeasurementOptions?.DisplayText</MudText>
                                                            </MudItem>
                                                            <MudItem xs="3">
                                                                <MudText Typo="Typo.caption">Last Replaced</MudText>
                                                                <MudText Typo="Typo.body1">@childContext.LastServiced?.ToString("MM/dd/yyyy")</MudText>
                                                            </MudItem>
                                                            <MudItem xs="3">
                                                                <MudText Typo="Typo.caption">Useful Life</MudText>
                                                                <MudText Typo="Typo.body1">@childContext.ElementUsefulLifeOptions?.DisplayText</MudText>
                                                            </MudItem>
                                                            <MudItem xs="3">
                                                                <MudText Typo="Typo.caption">Remaining Life</MudText>
                                                                <MudText Typo="Typo.body1">@childContext.ElementRemainingLifeOptions?.DisplayText</MudText>
                                                            </MudItem>
                                                        </MudGrid>
                                                    </MudTd>
                                                }
                                            </ChildRowContent>
                                            <GroupFooterTemplate Context="footerContext">
                                                <MudTh colspan="4">Total: @footerContext.Items.Count()</MudTh>
                                            </GroupFooterTemplate>
                                        </MudTable>
                                    </MudCardContent>
                                </MudCard>
                            }
                            else {
                                <MudText Typo="Typo.body1" Class="mt-4">No elements available.</MudText>
                            }
                        </MudTabPanel>
                        <!-- Service Contacts Tab -->
                        <MudTabPanel Text="Service Contacts" Icon="@Icons.Material.Filled.ContactPhone">
                            @if (elementsWithServiceContact.Any()) {
                                <MudExpansionPanels>
                                    @foreach (var element in elementsWithServiceContact) {
                                        <MudExpansionPanel>
                                            <TitleContent>
                                                <div class="d-flex">
                                                    @if (element.ServiceContact.Phone is null || element.ServiceContact.Email is null) {
                                                        <MudIcon Color="Color.Warning" Icon="@MaterialSymbols.Outlined.Warning"></MudIcon>
                                                    }
                                                    <MudText>@element.Name</MudText>
                                                </div>
                                            </TitleContent>
                                            <ChildContent>
                                                <MudGrid>
                                                    <MudItem xs="12">
                                                        <MudText Typo="Typo.caption">Company Name</MudText>
                                                        <MudText Class=" border-b-2 border-solid mud-border-primary">@element.ServiceContact?.CompanyName</MudText>
                                                    </MudItem>
                                                    <MudItem xs="12">
                                                        <MudText Typo="Typo.caption">Point Of Contact</MudText>
                                                        <MudText Class=" border-b-2 border-solid mud-border-primary">@element.ServiceContact?.FullNameInverted</MudText>
                                                    </MudItem>
                                                    <MudItem xs="12" sm="6">
                                                        <MudText Typo="Typo.caption">Phone</MudText>
                                                        <MudText Class=" border-b-2 border-solid mud-border-primary">@element.ServiceContact?.Phone</MudText>
                                                    </MudItem>
                                                    <MudItem xs="12" sm="6">
                                                        <MudText Typo="Typo.caption">Extension</MudText>
                                                        <MudText Class=" border-b-2 border-solid mud-border-primary">@element.ServiceContact?.Extension</MudText>
                                                    </MudItem>
                                                    <MudItem xs="12">
                                                        <MudLink Href="@($"mailto:{element.ServiceContact?.Email}")">
                                                            @element.ServiceContact?.Email
                                                        </MudLink>
                                                    </MudItem>
                                                </MudGrid>
                                            </ChildContent>
                                        </MudExpansionPanel>
                                    }
                                </MudExpansionPanels>
                            }
                            else {
                                <MudText Typo="Typo.body1" Class="mt-4">No service contacts available.</MudText>
                            }
                        </MudTabPanel>
                    </MudTabs>
                </MudItem>
            </MudGrid>
        </MudContainer>
    }
</MudContainer>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private ReserveStudy? reserveStudy;
    private bool isLoading = true;
    //private bool canUpdate = false;
    private List<IReserveStudyElement> elementsWithServiceContact = new();

    protected override async Task OnInitializedAsync() {
        try {
            await UserState.InitializeAsync();

            // Determine if the user can update based on role
            //canUpdate = UserState.ClaimsPrincipal.IsInRole("Specialist") || UserState.ClaimsPrincipal.IsInRole("User");

            using var context = await DbFactory.CreateDbContextAsync();
            reserveStudy = await context.ReserveStudies
                .AsNoTracking()
                .Include(rs => rs.Community).ThenInclude(c => c.Addresses)
                .Include(rs => rs.Contact)
                .Include(rs => rs.PropertyManager)
                .Include(rs => rs.Specialist)

                .Include(rs => rs.ReserveStudyBuildingElements!).ThenInclude(be => be.BuildingElement)
                .Include(rs => rs.ReserveStudyBuildingElements!).ThenInclude(be => be.ElementMeasurementOptions)
                .Include(rs => rs.ReserveStudyBuildingElements!).ThenInclude(be => be.ElementUsefulLifeOptions)
                .Include(rs => rs.ReserveStudyBuildingElements!).ThenInclude(be => be.ElementRemainingLifeOptions)
                .Include(rs => rs.ReserveStudyBuildingElements!).ThenInclude(be => be.ServiceContact)

                .Include(rs => rs.ReserveStudyCommonElements!).ThenInclude(be => be.CommonElement)
                .Include(rs => rs.ReserveStudyCommonElements!).ThenInclude(be => be.ElementMeasurementOptions)
                .Include(rs => rs.ReserveStudyCommonElements!).ThenInclude(be => be.ElementUsefulLifeOptions)
                .Include(rs => rs.ReserveStudyCommonElements!).ThenInclude(be => be.ElementRemainingLifeOptions)
                .Include(rs => rs.ReserveStudyCommonElements!).ThenInclude(be => be.ServiceContact)

                .Include(rs => rs.ReserveStudyAdditionalElements!).ThenInclude(be => be.ElementMeasurementOptions)
                .Include(rs => rs.ReserveStudyAdditionalElements!).ThenInclude(be => be.ElementUsefulLifeOptions)
                .Include(rs => rs.ReserveStudyAdditionalElements!).ThenInclude(be => be.ElementRemainingLifeOptions)
                .Include(rs => rs.ReserveStudyAdditionalElements!).ThenInclude(be => be.ServiceContact)

                .AsSplitQuery()
                .FirstOrDefaultAsync(rs => rs.Id == Id);

            elementsWithServiceContact = reserveStudy.ReserveStudyElements.Where(e => e.NeedsService).ToList();
        }
        catch (Exception ex) {
            Snackbar.Add($"Error loading reserve study: {ex.Message}", Severity.Error);
        }
        finally {
            isLoading = false;
        }
    }

    private string GetUpdateLink() => $"/ReserveStudies/Update/{reserveStudy?.Id}";
    private async Task SendRequestLink() {
        try {
            var subject = $"Reserve Study Request for {reserveStudy?.Community?.Name}";
            var additionalMessage = $"A reserve study request has been shared with you. You can view the details online or contact the assigned specialist for more information.";

            await EmailService.SendReserveStudyToContactsAsync(reserveStudy, subject, additionalMessage);

            Snackbar.Add("Request link sent successfully!", Severity.Success);
        }
        catch (Exception ex) {
            Snackbar.Add($"Error sending email: {ex.Message}", Severity.Error);
        }
    }

    private async Task SendAccessTokenLink() {
        try {
            var subject = $"Access Token for Reserve Study";
            var additionalMessage = $"A reserve study request has been shared with you. You can view the details online or contact the assigned specialist for more information.";

            await EmailService.SendAccessTokenEmailAsync(reserveStudy.Id, "emailme@jasonzurowski.com");

            Snackbar.Add("Request link sent successfully!", Severity.Success);
        }
        catch (Exception ex) {
            Snackbar.Add($"Error sending email: {ex.Message}", Severity.Error);
        }
    }

    private void ShowElement(IReserveStudyElement element) {
        element.ShowDetails = !element.ShowDetails;
    }
    private TableGroupDefinition<IReserveStudyElement> _groupDefinition = new() {
            GroupName = "Element Type",
            Indentation = false,
            Expandable = false,
            Selector = (element) => element.ElementType
        };
    private string GetGroupName(TableGroupData<object, IReserveStudyElement> headerContext) => $"{headerContext.GroupName}: {headerContext.Key}";

}
