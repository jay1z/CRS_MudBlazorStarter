@page "/ReserveStudies/Update/{Id:guid}"
@using CRS.Components.Layout
@using CRS.Components.Pages.ReserveStudyPages.Dialogs
@using CRS.Data
@using CRS.Services
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using static CRS.Models.IReserveStudyElement

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserStateService UserState
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Update Reserve Study</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (isLoading) {
        <MudPaper Elevation="0" Class="pa-8">
            <MudProgressLinear Color="Color.Warning" Indeterminate="true" />
            <MudText Typo="Typo.h5" Class="mt-4">Loading Reserve Study...</MudText>
        </MudPaper>
    }
    else if (reserveStudy == null) {
        NavigationManager.NavigateTo("/ReserveStudies/NotFound");
    }
    else {
        <MudText Typo="Typo.h4">@reserveStudy.Community?.Name</MudText>
        <EditForm OnValidSubmit="SaveChanges" EditContext="editContext">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <MudGrid>
                <!-- Aside Column -->
                <MudItem xs="12" lg="4">
                    <!-- Details Card -->
                    <MudCard Elevation="0" Outlined="true" Class="mb-4">
                        <MudCardContent>
                            <MudText Typo="Typo.h6" Color="Color.Warning">Request ID</MudText>
                            <MudText Typo="Typo.body2">@reserveStudy.Id</MudText>
                            <MudDivider Class="my-2" />
                            <MudText Typo="Typo.h6" Color="Color.Warning">Created</MudText>
                            <MudText Typo="Typo.body2">@reserveStudy.DateCreated?.ToString("MM/dd/yyyy")</MudText>
                        </MudCardContent>
                    </MudCard>

                    <!-- Community Card -->
                    <MudCard Elevation="0" Outlined="true" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">@reserveStudy.Community.Name</MudText>
                                <MudText Typo="Typo.body1">@reserveStudy.Community.Addresses[0].FullAddress</MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent>
                            @* <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/Communities/Details/{@reserveStudy.Community.Id}")">View Community</MudButton> *@
                        </MudCardContent>
                    </MudCard>

                    <!-- Specialist Card -->
                    <MudCard Elevation="0" Outlined="true" Class="mb-4">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.h6">Reserve Specialist</MudText>
                            </CardHeaderContent>
                            <CardHeaderActions>
                                @if (canUpdateSpecialist) {
                                    <MudText Typo="Typo.caption">Assign</MudText>
                                    <MudIconButton Icon="@Icons.Material.Filled.AssignmentReturn" Color="Color.Warning" OnClick="OpenAssignSpecialistDialog">Assign Specialist</MudIconButton>
                                }
                            </CardHeaderActions>
                        </MudCardHeader>
                        <MudCardContent>
                            <MudText Typo="Typo.body1">@reserveStudy.Specialist?.FullName</MudText>
                            <MudLink Href="@($"mailto:{reserveStudy.Specialist?.Email}")">@(reserveStudy.Specialist?.Email ?? "Not Assigned")</MudLink>
                        </MudCardContent>
                    </MudCard>

                    <!-- Actions Card -->
                    <MudCard Elevation="0" Outlined="true" Class="mb-4">
                        <MudCardContent>
                            <MudButton Variant="Variant.Filled" Color="Color.Warning" ButtonType="ButtonType.Submit">Save Changes</MudButton>
                            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Class="mx-4" OnClick="Cancel">Cancel</MudButton>
                        </MudCardContent>
                    </MudCard>

                    @if (reserveStudy.DateCreated.HasValue && (DateTime.Now - reserveStudy.DateCreated.Value).TotalDays > 30 && !reserveStudy.IsComplete) {
                        <MudAlert Severity="Severity.Warning" Elevation="25">
                            <MudText Typo="Typo.h6" Class="text-gray-900 fw-bold">Attention!</MudText>
                            <MudText Typo="Typo.body2" Class="text-gray-700">
                                This request has been pending for more than
                                <MudText Color="Color.Primary" Typo="Typo.body2" Class="fw-bold">@((DateTime.Now - reserveStudy.DateCreated.Value).TotalDays.ToString("N0")) days</MudText>
                            </MudText>
                        </MudAlert>
                    }
                </MudItem>

                <!-- Main Column -->
                <MudItem xs="12" lg="8">
                    <MudTabs Elevation="25" Color="Color.Warning">
                        <!-- Information Tab -->
                        <MudTabPanel Text="Information" Icon="@Icons.Material.Filled.Info">
                            <MudCard Elevation="25">
                                <MudCardContent Class="py-6">
                                    <MudGrid>
                                        <!-- Contact Information -->
                                        <MudItem xs="12">
                                            <MudText Typo="Typo.h6" Color="Color.Warning">Contact</MudText>
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTextField @bind-Value="reserveStudy.Contact.LastName" Label="Last Name" Variant="Variant.Outlined" />
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTextField @bind-Value="reserveStudy.Contact.FirstName" Label="First Name" Variant="Variant.Outlined" />
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTextField @bind-Value="reserveStudy.Contact.Phone" Label="Phone" InputType="InputType.Telephone" Variant="Variant.Outlined" />
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTextField @bind-Value="reserveStudy.Contact.Extension" Label="Extension" Mask="@(new PatternMask("0000"))" Variant="Variant.Outlined" />
                                        </MudItem>
                                        <MudItem xs="6">
                                            <MudTextField @bind-Value="reserveStudy.Contact.Email" Label="Email" InputType="InputType.Email" Variant="Variant.Outlined" />
                                        </MudItem>
                                        <!-- Property Manager Information -->
                                        @if (reserveStudy.PropertyManager != null) {
                                            <MudItem xs="12" Class="mt-4">
                                                <MudText Typo="Typo.h6" Color="Color.Warning">Property Manager</MudText>
                                            </MudItem>
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="reserveStudy.PropertyManager.CompanyName" Label="Company Name" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudFlexBreak />
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="reserveStudy.PropertyManager.LastName" Label="Last Name" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="reserveStudy.PropertyManager.FirstName" Label="First Name" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="reserveStudy.PropertyManager.Phone" Label="Phone" InputType="InputType.Telephone" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="reserveStudy.PropertyManager.Extension" Label="Extension" Mask="@(new PatternMask("0000"))" Variant="Variant.Outlined" />
                                            </MudItem>
                                            <MudItem xs="6">
                                                <MudTextField @bind-Value="reserveStudy.PropertyManager.Email" Label="Email" InputType="InputType.Email" Variant="Variant.Outlined" />
                                            </MudItem>
                                        }
                                    </MudGrid>
                                </MudCardContent>
                            </MudCard>
                        </MudTabPanel>
                        <!-- Elements Tab -->
                        <MudTabPanel Text="Elements" Icon="@Icons.Material.Filled.List">
                            <MudCard Elevation="25">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Elements</MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <MudMenu Icon="@Icons.Material.Filled.Add" Color="Color.Success" Label="Add Element" Variant="Variant.Outlined">
                                            <MudMenuItem OnClick="OpenAddBuildingElementDialog">Add Building Element</MudMenuItem>
                                            <MudMenuItem OnClick="OpenAddCommonElementDialog">Add Common Element</MudMenuItem>
                                            <MudMenuItem OnClick="OpenAddAdditionalElementDialog">Add Additional Element</MudMenuItem>
                                        </MudMenu>
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent Class="py-6">
                                    <MudTable Dense="true" Hover="true" Elevation="0" Items="@reserveStudy.ReserveStudyElements"
                                              GroupBy="@_groupDefinition"
                                              GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
                                              GroupFooterClass="mb-4">
                                        <ColGroup>
                                            <col style="width:10%;" />
                                            <col style="width:40%;" />
                                            <col style="width:20%;" />
                                            <col style="width:20%;" />
                                            <col style="width:10%;" />
                                        </ColGroup>
                                        <HeaderContent>
                                            <MudTh></MudTh>
                                            <MudTh>Name</MudTh>
                                            <MudTh>Needs Service</MudTh>
                                            <MudTh class="text-end">Amount</MudTh>
                                            <MudTh class="text-center">Actions</MudTh>
                                        </HeaderContent>
                                        <GroupHeaderTemplate Context="headerContext">
                                            <MudTh colspan="4">@GetGroupName(headerContext)</MudTh>
                                        </GroupHeaderTemplate>
                                        <RowTemplate Context="rowContext">
                                            <MudTd>
                                                <MudIconButton Icon="@((rowContext.ShowDetails == true) ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)" OnClick="@(() => ShowElement(rowContext))" />
                                            </MudTd>
                                            <MudTd>
                                                <MudText Typo="Typo.body1">@rowContext.Name</MudText>
                                            </MudTd>
                                            <MudTd>
                                                <MudCheckBox T="bool" @bind-Value="rowContext.NeedsService" Color="Color.Success" UncheckedColor="Color.Error" ReadOnly="true" />
                                            </MudTd>
                                            <MudTd class="text-end">
                                                <MudNumericField @bind-Value="rowContext.Count" Min="0" />
                                            </MudTd>
                                            <MudTd class="text-center">
                                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="() => RemoveElement(rowContext)" />
                                            </MudTd>
                                        </RowTemplate>
                                        <ChildRowContent Context="childContext">
                                            @if (childContext.ShowDetails) {
                                                <MudTd colspan="4">
                                                    <MudGrid>
                                                        <MudItem xs="3">
                                                            <MudSelect @bind-Value="childContext.ElementMeasurementOptions" Label="Measurement Options">
                                                                @foreach (var option in measurementOptions) {
                                                                <MudSelectItem Value="option">@option.DisplayText</MudSelectItem>
                                                            }
                                                        </MudSelect>
                                                    </MudItem>
                                                    <MudItem xs="3">
                                                        <MudText Typo="Typo.caption">Last Replaced</MudText>
                                                        <MudText Typo="Typo.body1">@childContext.LastServiced?.ToString("MM/dd/yyyy")</MudText>
                                                    </MudItem>
                                                    <MudItem xs="3">
                                                        <MudSelect @bind-Value="childContext.ElementUsefulLifeOptions" Label="Useful Life">
                                                            @foreach (var option in usefulLifeOptions) {
                                                                <MudSelectItem Value="option">@option.DisplayText</MudSelectItem>
                                                            }
                                                        </MudSelect>
                                                    </MudItem>
                                                    <MudItem xs="3">
                                                        <MudSelect @bind-Value="childContext.ElementRemainingLifeOptions" Label="Remaining Life">
                                                            @foreach (var option in remainingLifeOptions) {
                                                                <MudSelectItem Value="option">@option.DisplayText</MudSelectItem>
                                                            }
                                                        </MudSelect>
                                                    </MudItem>
                                                </MudGrid>
                                            </MudTd>
                                            }
                                        </ChildRowContent>
                                        <GroupFooterTemplate Context="footerContext">
                                            <MudTh colspan="4">Total: @footerContext.Items.Count()</MudTh>
                                        </GroupFooterTemplate>
                                    </MudTable>
                                </MudCardContent>
                            </MudCard>
                        </MudTabPanel>
                        <!-- Service Contacts Tab -->
                        <MudTabPanel Text="Service Contacts" Icon="@Icons.Material.Filled.ContactPhone">
                            @if (elementsWithServiceContact.Any()) {
                                <MudExpansionPanels>
                                    @foreach (var element in elementsWithServiceContact) {
                                        <MudExpansionPanel>
                                            <TitleContent>
                                                <div class="d-flex">
                                                    @if (element.ServiceContact.CompanyName is null && element.ServiceContact.FirstName is null) {
                                                        <MudIcon Color="Color.Warning" Icon="@MaterialSymbols.Outlined.Warning"></MudIcon>
                                                    }
                                                    <MudText>@element.Name</MudText>
                                                </div>
                                            </TitleContent>
                                            <ChildContent>
                                                <MudGrid>
                                                    <MudItem xs="12">
                                                        <MudTextField @bind-Value="element.ServiceContact.CompanyName" Label="Company Name" Variant="Variant.Outlined" />
                                                    </MudItem>
                                                    <MudItem xs="6">
                                                        <MudTextField @bind-Value="element.ServiceContact.FirstName" Label="First Name" Variant="Variant.Outlined" />
                                                    </MudItem>
                                                    <MudItem xs="6">
                                                        <MudTextField @bind-Value="element.ServiceContact.LastName" Label="Last Name" Variant="Variant.Outlined" />
                                                    </MudItem>
                                                    <MudItem xs="6">
                                                        <MudTextField @bind-Value="element.ServiceContact.Phone" Label="Phone" Variant="Variant.Outlined" />
                                                    </MudItem>
                                                    <MudItem xs="6">
                                                        <MudTextField @bind-Value="element.ServiceContact.Extension" Label="Extension" Variant="Variant.Outlined" />
                                                    </MudItem>
                                                    <MudItem xs="12">
                                                        <MudTextField @bind-Value="element.ServiceContact.Email" Label="Email" Variant="Variant.Outlined" />
                                                    </MudItem>
                                                </MudGrid>
                                            </ChildContent>
                                        </MudExpansionPanel>
                                    }
                                </MudExpansionPanels>
                            }
                            else {
                                <MudText Typo="Typo.body1" Class="mt-4">No service contacts available.</MudText>
                            }
                        </MudTabPanel>
                    </MudTabs>
                </MudItem>
            </MudGrid>
        </EditForm>
    }
</MudContainer>

@code {
    [Parameter]
    public Guid Id { get; set; }
    private ApplicationDbContext context;
    private EditContext? editContext;
    private List<ApplicationUser> applicationUsers = new();
    private ValidationMessageStore? messageStore;
    private bool isLoading = true;
    //private bool canUpdate = false;
    private bool canUpdateSpecialist = false;
    private List<IReserveStudyElement> elementsWithServiceContact = new();

    private ReserveStudy reserveStudy;
    private List<ElementMeasurementOptions> measurementOptions;
    private List<ElementUsefulLifeOptions> usefulLifeOptions;
    private List<ElementRemainingLifeOptions> remainingLifeOptions;
    private List<BuildingElement> availableBuildingElements = new();
    private List<CommonElement> availableCommonElements = new();

    protected override async Task OnInitializedAsync() {
        try {
            await UserState.InitializeAsync();

            // Determine if the user can edit based on role
            //canUpdate = user.IsInRole("Specialist") || user.IsInRole("Admin");
            canUpdateSpecialist = UserState.ClaimsPrincipal.IsInRole("Specialist") || UserState.ClaimsPrincipal.IsInRole("Admin");

            context = await DbFactory.CreateDbContextAsync();

            reserveStudy = context.ReserveStudies
                .Include(rs => rs.Community).ThenInclude(c => c.Addresses)
                .Include(rs => rs.Contact)
                .Include(rs => rs.PropertyManager)
                .Include(rs => rs.Specialist)

                .Include(rs => rs.ReserveStudyBuildingElements).ThenInclude(be => be.BuildingElement)
                .Include(rs => rs.ReserveStudyBuildingElements).ThenInclude(be => be.ElementMeasurementOptions)
                .Include(rs => rs.ReserveStudyBuildingElements).ThenInclude(be => be.ElementUsefulLifeOptions)
                .Include(rs => rs.ReserveStudyBuildingElements).ThenInclude(be => be.ElementRemainingLifeOptions)
                .Include(rs => rs.ReserveStudyBuildingElements).ThenInclude(be => be.ServiceContact)

                .Include(rs => rs.ReserveStudyCommonElements).ThenInclude(be => be.CommonElement)
                .Include(rs => rs.ReserveStudyCommonElements).ThenInclude(be => be.ElementMeasurementOptions)
                .Include(rs => rs.ReserveStudyCommonElements).ThenInclude(be => be.ElementUsefulLifeOptions)
                .Include(rs => rs.ReserveStudyCommonElements).ThenInclude(be => be.ElementRemainingLifeOptions)
                .Include(rs => rs.ReserveStudyCommonElements).ThenInclude(be => be.ServiceContact)

                .Include(rs => rs.ReserveStudyAdditionalElements).ThenInclude(be => be.ElementMeasurementOptions)
                .Include(rs => rs.ReserveStudyAdditionalElements).ThenInclude(be => be.ElementUsefulLifeOptions)
                .Include(rs => rs.ReserveStudyAdditionalElements).ThenInclude(be => be.ElementRemainingLifeOptions)
                .Include(rs => rs.ReserveStudyAdditionalElements).ThenInclude(be => be.ServiceContact)

                .FirstOrDefault(rs => rs.Id == Id);

            elementsWithServiceContact = reserveStudy.ReserveStudyElements.Where(e => e.NeedsService).ToList();

            InitializeEditContext();
            messageStore = new(editContext);
            applicationUsers = await context.Users.ToListAsync();

            measurementOptions = await context.ElementMeasurementOptions.ToListAsync();
            usefulLifeOptions = await context.ElementUsefulLifeOptions.ToListAsync();
            remainingLifeOptions = await context.ElementRemainingLifeOptions.ToListAsync();
            availableBuildingElements = await context.BuildingElements.ToListAsync();
            availableCommonElements = await context.CommonElements.ToListAsync();
        }
        catch (Exception ex) {
            Snackbar.Add($"Error loading reserve study: {ex.Message}", Severity.Error);
            Snackbar.Add($"Error loading reserve study: {ex.InnerException?.Message}", Severity.Error);
        }
        finally {
            isLoading = false;
        }
    }

    private void InitializeEditContext() {
        editContext = new(reserveStudy);
        editContext.OnValidationRequested += HandleValidationRequested;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args) {
        messageStore?.Clear();
    }

    private void ShowElement(IReserveStudyElement element) {
        element.ShowDetails = !element.ShowDetails;
    }

    private TableGroupDefinition<IReserveStudyElement> _groupDefinition = new() {
            GroupName = "Element Type",
            Indentation = false,
            Expandable = false,
            Selector = (element) => element.ElementType
        };
    private string GetGroupName(TableGroupData<object, IReserveStudyElement> headerContext) => $"{headerContext.GroupName}: {headerContext.Key}";

    private async Task SaveChanges() {
        try {
            // Since we're tracking all entities, just save changes
            await context.SaveChangesAsync();

            Snackbar.Add("Changes saved successfully!", Severity.Success);
            NavigationManager.NavigateTo($"/ReserveStudies/Details/{reserveStudy.Id}");
        }
        catch (DbUpdateException ex) {
            // Handle database-specific errors
            var innerException = ex.InnerException?.Message ?? ex.Message;
            Snackbar.Add($"Database error: {innerException}", Severity.Error);
        }
        catch (Exception ex) {
            Snackbar.Add($"Error saving changes: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenAssignSpecialistDialog() {
        var specialists = await GetSpecialists();
        var parameters = new DialogParameters { ["specialists"] = specialists };
        var dialog = await DialogService.ShowAsync<AssignSpecialistDialog>("Assign Specialist", parameters);
        var result = await dialog.Result;

        if (!result.Canceled) {
            reserveStudy.Specialist = (ApplicationUser)result.Data;
            await SaveChanges();
        }
    }

    private async Task<List<ApplicationUser>> GetSpecialists() {
        var specialists = new List<ApplicationUser>();
        foreach (var user in applicationUsers) {
            var roles = await UserManager.GetRolesAsync(user);
            if (roles.Contains("Specialist")) {
                specialists.Add(user);
            }
        }
        return specialists;
    }

    private async Task OpenAddBuildingElementDialog() {
        // Get building elements that aren't already associated with this study
        var unusedElements = availableBuildingElements.Where(be => !reserveStudy.ReserveStudyBuildingElements.Any(rsbe => rsbe.BuildingElementId == be.Id)).ToList();
        if (!unusedElements.Any()) {
            Snackbar.Add("All building elements have already been added", Severity.Info);
            return;
        }
        var parameters = new DialogParameters { ["elements"] = unusedElements };

        var dialog = await DialogService.ShowAsync<SelectBuildingElementDialog>("Add Building Element", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is BuildingElement selectedElement) {
            // Create the service contact - don't add to context yet
            var serviceContact = new ServiceContact();

            reserveStudy.ReserveStudyBuildingElements ??= new List<ReserveStudyBuildingElement>();
            var newElement = new ReserveStudyBuildingElement {
                    ReserveStudyId = reserveStudy.Id,
                    BuildingElementId = selectedElement.Id,
                    BuildingElement = selectedElement,
                    ServiceContact = serviceContact
                };

            // Add to tracking context but don't save yet
            context.ServiceContacts.Add(serviceContact);
            reserveStudy.ReserveStudyBuildingElements.Add(newElement);

            // Update the UI immediately
            StateHasChanged();

            // If needed, update service contacts list
            if (selectedElement.NeedsService) {
                elementsWithServiceContact = reserveStudy.ReserveStudyElements.Where(e => e.NeedsService).ToList();
            }
        }
    }

    private async Task OpenAddCommonElementDialog() {
        // Get common elements that aren't already associated with this study
        var unusedElements = availableCommonElements.Where(ce => !reserveStudy.ReserveStudyCommonElements.Any(rsce => rsce.CommonElementId == ce.Id)).ToList();
        if (!unusedElements.Any()) {
            Snackbar.Add("All common elements have already been added", Severity.Info);
            return;
        }
        var parameters = new DialogParameters { ["elements"] = unusedElements };

        var dialog = await DialogService.ShowAsync<SelectCommonElementDialog>("Add Common Element", parameters);
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is CommonElement selectedElement) {
            // Create the service contact - don't add to context yet
            var serviceContact = new ServiceContact();

            reserveStudy.ReserveStudyCommonElements ??= new List<ReserveStudyCommonElement>();
            var newElement = new ReserveStudyCommonElement {
                    ReserveStudyId = reserveStudy.Id,
                    CommonElementId = selectedElement.Id,
                    CommonElement = selectedElement,
                    ServiceContact = serviceContact
                };

            // Add to tracking context but don't save yet
            context.ServiceContacts.Add(serviceContact);
            reserveStudy.ReserveStudyCommonElements.Add(newElement);

            // Update the UI immediately
            StateHasChanged();

            // If needed, update service contacts list
            if (selectedElement.NeedsService) {
                elementsWithServiceContact = reserveStudy.ReserveStudyElements.Where(e => e.NeedsService).ToList();
            }
        }
    }

    private async Task OpenAddAdditionalElementDialog() {
        var dialog = await DialogService.ShowAsync<AddAdditionalElementDialog>("Add Additional Element");
        var result = await dialog.Result;

        if (!result.Canceled && result.Data is ReserveStudyAdditionalElement selectedElement) {
            // Create the service contact - don't add to context yet
            var serviceContact = selectedElement.ServiceContact;

            reserveStudy.ReserveStudyAdditionalElements ??= new List<ReserveStudyAdditionalElement>();
            var newElement = new ReserveStudyAdditionalElement {
                    ReserveStudyId = reserveStudy.Id,
                    Name = selectedElement.Name,
                    Count = selectedElement.Count,
                    NeedsService = selectedElement.NeedsService,
                    ServiceContact = serviceContact
                };

            // Add to tracking context but don't save yet
            context.ServiceContacts.Add(serviceContact);
            context.ReserveStudyAdditionalElements.Add(newElement);
            //reserveStudy.ReserveStudyAdditionalElements.Add(newElement);

            // Update the UI immediately
            StateHasChanged();

            // If needed, update service contacts list
            if (selectedElement.NeedsService) {
                elementsWithServiceContact = reserveStudy.ReserveStudyElements.Where(e => e.NeedsService).ToList();
            }
        }
    }

    private void RemoveElement(IReserveStudyElement element) {
        switch (element.ElementType) {
            case ElementTypeEnum.Building:
                var buildingElement = reserveStudy.ReserveStudyBuildingElements.FirstOrDefault(e => e == element);
                if (buildingElement != null)
                    reserveStudy.ReserveStudyBuildingElements.Remove(buildingElement);
                break;

            case ElementTypeEnum.Common:
                var commonElement = reserveStudy.ReserveStudyCommonElements.FirstOrDefault(e => e == element);
                if (commonElement != null)
                    reserveStudy.ReserveStudyCommonElements.Remove(commonElement);
                break;

            case ElementTypeEnum.Additional:
                var additionalElement = reserveStudy.ReserveStudyAdditionalElements.FirstOrDefault(e => e == element);
                if (additionalElement != null)
                    reserveStudy.ReserveStudyAdditionalElements.Remove(additionalElement);
                break;
        }

        // Update the service contacts list if needed
        elementsWithServiceContact = reserveStudy.ReserveStudyElements.Where(e => e.NeedsService).ToList();

        // Refresh the UI
        StateHasChanged();
    }

    private void Cancel() {
        NavigationManager.NavigateTo($"/ReserveStudies/Details/{Id}");
    }

    public void Dispose() {
        if (editContext is not null) {
            editContext.OnValidationRequested -= HandleValidationRequested;
        }
        context?.Dispose();
    }

}
