@page "/ReserveStudies/Create"
@attribute [Authorize(Roles = "User")]
@using CRS.Components.Layout
@using CRS.Components.Pages.ReserveStudyPages.Steps
@using CRS.Data
@using CRS.Models
@using CRS.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@implements IAsyncDisposable
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject UserStateService UserState
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Create Reserve Study</PageTitle>

@if (isLoading) {
    <MudPaper Elevation="0" Class="pa-8">
        <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
        <MudText Typo="Typo.h5" Class="mt-4">Loading Reserve Studies...</MudText>
    </MudPaper>
}
else {
    <MudText Typo="Typo.h4" Class="mb-4">Create New Reserve Study</MudText>
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudCard Elevation="25">
            <MudCardContent>
                <MudStepper @bind-ActiveStep="activeStep" Linear="true" CenterLabels="true" CompletedStepColor="Color.Success" CurrentStepColor="Color.Primary" Class="mb-4" @ref="stepper">
                    <ChildContent>
                        @foreach (var step in steps) {
                            <MudStep Title="@step.Title"
                                     Icon="@(stepValidationState.GetValueOrDefault(step.Index) ? Icons.Material.Filled.CheckCircle : null)"
                                     IconColor="@(stepValidationState.GetValueOrDefault(step.Index) ? Color.Success : Color.Default)">
                                @step.Content
                            </MudStep>
                        }
                    </ChildContent>
                    <CompletedContent>
                        <Step5 />
                    </CompletedContent>
                    <ActionContent>
                        @if (!_completed) {
                            <MudGrid Justify="Justify.SpaceBetween" Class="mt-4">
                                <MudItem>
                                    <MudButton Variant="Variant.Filled" Color="Color.Secondary" Disabled="activeStep <= 0" OnClick="PreviousStep">
                                        <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="mr-2" />
                                        Back
                                    </MudButton>
                                </MudItem>
                                <MudItem>
                                    @if (activeStep < steps.Count - 1) {
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NextStep">
                                            Continue
                                            <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Class="ml-2" />
                                        </MudButton>
                                    }
                                    else if (AcceptTerms) {
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitForm" Disabled="isSubmitting || !IsFormValid()">
                                            @if (isSubmitting) {
                                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                                <span>Submitting...</span>
                                            }
                                            else {
                                                <span>Submit</span>
                                            }
                                        </MudButton>
                                    }
                                </MudItem>
                            </MudGrid>
                        }
                    </ActionContent>
                </MudStepper>
            </MudCardContent>
        </MudCard>
    </MudContainer>
}

@code {
    private record StepDefinition(int Index, string Title, RenderFragment Content);

    [CascadingParameter] public Routes? Routes { get; set; }
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private ApplicationDbContext? context;
    private ReserveStudy? Model { get; set; }
    private Dictionary<int, bool> stepValidationState = new();

    private MudStepper? stepper;
    private bool isLoading = true;
    private bool isSubmitting;
    private bool AcceptTerms;
    private bool _completed;
    private bool isExistingCommunity;
    private int activeStep;

    private Step1? step1;
    private Step2? step2;
    private Step3? step3;
    private Step4? step4;

    private List<StepDefinition> steps = new();

    protected override async Task OnInitializedAsync() {
        try {
            if (!UserState.ClaimsPrincipal.Identity?.IsAuthenticated ?? true) {
                NavigationManager.NavigateTo("/login");
                return;
            }

            await InitializeModel();
            InitializeSteps();
            context = await DbFactory.CreateDbContextAsync();
            Routes?.SetLayout(typeof(MainLayout));
        }
        catch (Exception ex) {
            Snackbar.Add($"Error initializing: {ex.Message}", Severity.Error);
        }
        finally {
            isLoading = false;
        }
    }

    private void InitializeSteps() {
        steps = new List<StepDefinition>
                                        {
            new(0, "Community Information", @<Step1 @ref="step1" Model="Model" StepValidated="OnStepValidated" OnExistingCommunityChanged="@((bool isExisting) => isExistingCommunity = isExisting)" />),
            new(1, "Property Manager", @<Step2 @ref="step2" Model="Model" StepValidated="OnStepValidated" />),
            new(2, "Property Elements", @<Step3 @ref="step3" Model="Model" StepValidated="OnStepValidated" />),
            new(3, "Acknowledgement", @<Step4 @ref="step4" Model="Model" StepValidated="OnStepValidated" AcceptTerms="@AcceptTerms" AcceptTermsChanged="@OnAcceptTermsChanged" />)
        };
    }

    private async Task InitializeModel() {
        Model = new ReserveStudy {
                ApplicationUserId = GetCurrentUserId(UserState.ClaimsPrincipal),
                Community = new Community() {
                    Name = "Community",
                    Addresses = new List<Address>() {
                            new Address() {
                                Street = "123 Main St",
                                City = "Anytown",
                                State = "CA",
                                Zip = "12345"
                            }
                        }
                },
                Contact = new Contact() {
                    FirstName = "Peter",
                    LastName = "Zurowski",
                    Email = "peter@zurowski.com",
                    Phone = "123-456-7890",
                    Extension = "123",
                },
                PropertyManager = new PropertyManager() {
                    FirstName = "Jeff",
                    LastName = "Ripple",
                    CompanyName = "Ripple Property Management",
                    Email = "jeff@ripple.com",
                    Phone = "123-456-7891"
                },
                ReserveStudyAdditionalElements = new List<ReserveStudyAdditionalElement>(),
                IsActive = true
            };
    }

    public async ValueTask DisposeAsync() {
        if (context is not null) {
            await context.DisposeAsync();
        }
    }

    private async Task NextStep() {
        try {
            bool isValid = await ValidateCurrentStep();
            if (isValid) {
                activeStep++;
                await stepper!.NextStepAsync();
            }
        }
        catch (Exception ex) {
            Snackbar.Add($"Error validating step: {ex.Message}", Severity.Error);
        }
    }

    private async Task<bool> ValidateCurrentStep() {
        bool isValid = activeStep switch {
            0 => step1 != null && await step1.ValidateAsync(),
            1 => step2 != null && await step2.ValidateAsync(),
            2 => step3 != null && await step3.ValidateAsync(),
            3 => step4 != null && await step4.ValidateAsync(),
            _ => false
        };

        if (!isValid) {
            Snackbar.Add(activeStep == 3
                ? "You must accept the terms to proceed."
                : "Please correct the errors before proceeding.",
                Severity.Warning);
        }

        return isValid;
    }

    private async Task PreviousStep() {
        if (activeStep > 0) {
            activeStep--;
            await stepper!.PreviousStepAsync();
        }
    }

    private bool IsFormValid() =>
        steps.All(step => stepValidationState.GetValueOrDefault(step.Index)) && AcceptTerms;

    private async Task SubmitForm() {
        if (!IsFormValid()) {
            Snackbar.Add("Please complete all required fields.", Severity.Warning);
            return;
        }

        isSubmitting = true;
        try {
            // Create a new context for the submission
            await using var submitContext = await DbFactory.CreateDbContextAsync();

            if (isExistingCommunity && Model?.Community?.Id != null) {
                // For existing community, just set the reference without trying to attach
                Model.CommunityId = Model.Community.Id;
                // Detach the Community from the Model to prevent tracking conflicts
                Model.Community = null;
            }
            else {
                // For new community, ensure it's tracked as a new entity
                if (Model?.Community != null) {
                    Model.Community.Id = Guid.Empty; // Ensure new ID is generated
                    foreach (var address in Model.Community.Addresses ?? Enumerable.Empty<Address>()) {
                        address.Id = Guid.Empty; // Ensure new IDs for addresses
                    }
                }
            }

            // Add the reserve study
            submitContext.ReserveStudies.Add(Model!);
            await submitContext.SaveChangesAsync();

            Snackbar.Add("Reserve Study submitted successfully!", Severity.Success);
            _completed = true;
            await stepper!.NextStepAsync();
        }
        catch (Exception ex) {
            Snackbar.Add($"Error submitting form: {ex.Message}", Severity.Error);
            if (ex.InnerException != null) {
                Snackbar.Add($"Additional details: {ex.InnerException.Message}", Severity.Error);
            }
        }
        finally {
            isSubmitting = false;
        }
    }

    private Task OnAcceptTermsChanged(bool value) {
        AcceptTerms = value;
        stepValidationState[3] = value;
        return Task.CompletedTask;
    }

    private void OnStepValidated(bool isValid) {
        stepValidationState[activeStep] = isValid;
        StateHasChanged();
    }

    private Guid? GetCurrentUserId(ClaimsPrincipal user) {
        var userIdString = user.FindFirstValue(ClaimTypes.NameIdentifier);
        if (string.IsNullOrEmpty(userIdString) || !Guid.TryParse(userIdString, out Guid userId)) {
            throw new InvalidOperationException("User ID not found or invalid");
        }
        return userId;
    }
}
