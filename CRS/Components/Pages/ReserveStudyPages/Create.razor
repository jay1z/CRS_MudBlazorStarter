@attribute [Authorize(Roles = "User")]
@page "/reservestudies/create"
@using CRS.Components.Layout
@using CRS.Components.Pages.ReserveStudyPages.Steps
@using CRS.Data
@using CRS.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<PageTitle>Create</PageTitle>

<MudText Typo="Typo.h4">Create New Reserve Study</MudText>
<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-4">
    <MudCard Elevation="25">
        <MudCardContent>
            <MudStepper @bind-ActiveStep="activeStep" Linear="true" CenterLabels="true" CompletedStepColor="Color.Success" CurrentStepColor="Color.Primary" Class="mb-4" @ref="stepper">
                <ChildContent>
                    <MudStep Title="Community Information" Icon="@(stepValidationState.GetValueOrDefault(0) ? Icons.Material.Filled.CheckCircle : null)" IconColor="@(stepValidationState.GetValueOrDefault(0) ? Color.Success : Color.Default)">
                        <Step1 @ref="step1" Model="Model" StepValidated="OnStepValidated"  />
                    </MudStep>
                    <MudStep Title="Property Manager" Icon="@(stepValidationState.GetValueOrDefault(0) ? Icons.Material.Filled.CheckCircle : null)" IconColor="@(stepValidationState.GetValueOrDefault(0) ? Color.Success : Color.Default)">
                        <Step2 @ref="step2" Model="Model" StepValidated="OnStepValidated" />
                    </MudStep>
                    <MudStep Title="Property Elements" Icon="@(stepValidationState.GetValueOrDefault(0) ? Icons.Material.Filled.CheckCircle : null)" IconColor="@(stepValidationState.GetValueOrDefault(0) ? Color.Success : Color.Default)">
                        <Step3 @ref="step3" Model="Model" StepValidated="OnStepValidated" />
                    </MudStep>
                    <MudStep Title="Acknowledgement" Icon="@(stepValidationState.GetValueOrDefault(0) ? Icons.Material.Filled.CheckCircle : null)" IconColor="@(stepValidationState.GetValueOrDefault(0) ? Color.Success : Color.Default)">
                        <Step4 @ref="step4" Model="Model" StepValidated="OnStepValidated" AcceptTerms="@AcceptTerms" AcceptTermsChanged="@OnAcceptTermsChanged" />
                    </MudStep>
                </ChildContent>
                <CompletedContent>
                    <Step5 />
                </CompletedContent>
                <ActionContent Context="stepper">
                    @if (!_completed)
                    {
                        <MudGrid Justify="Justify.SpaceBetween" Class="mt-4">
                            <MudItem>
                                <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="activeStep <= 0" OnClick="PreviousStep">
                                    <MudIcon Icon="@Icons.Material.Filled.ArrowBack" Class="mr-2" />
                                    Back
                                </MudButton>
                            </MudItem>
                            <MudItem>
                                @if (activeStep < totalSteps - 1)
                                {
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="NextStep">
                                        Continue
                                        <MudIcon Icon="@Icons.Material.Filled.ArrowForward" Class="ml-2" />
                                    </MudButton>
                                }
                                else
                                {
                                    @if (AcceptTerms)
                                    {
                                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="SubmitForm" Disabled="isSubmitting">
                                            <span class="mud-button-content">
                                                Submit
                                                @if (isSubmitting)
                                                {
                                                    <MudProgressCircular Indeterminate="true" Color="Color.Inherit" Class="ml-2" />
                                                }
                                            </span>
                                        </MudButton>
                                    }
                                    else
                                    {
                                        <MudText Color="Color.Error" Class="mt-2">
                                            You must accept the terms to submit.
                                        </MudText>
                                    }
                                }
                            </MudItem>
                        </MudGrid>
                    }
                </ActionContent>
            </MudStepper>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    [CascadingParameter]
    public Routes Routes { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private ApplicationDbContext? context;
    private ReserveStudy? Model { get; set; }
    private Dictionary<int, bool> stepValidationState = new();

    // private const string STORAGE_KEY = "reserve-study-draft";

    private MudStepper? stepper;
    private readonly int totalSteps = 4;
    private int activeStep = 0;
    private bool isSubmitting = false;
    private bool AcceptTerms = false;
    private bool _completed;
    private Step1? step1;
    private Step2? step2;
    private Step3? step3;
    private Step4? step4;
    private Step5? step5;

    private Task OnAcceptTermsChanged(bool value)
    {
        AcceptTerms = value;
        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        // await LoadProgress();

        var authState = await AuthenticationStateTask!;
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var userId = user.FindFirstValue(ClaimTypes.NameIdentifier) ?? throw new InvalidOperationException("User ID not found.");

            var layoutType = IsUserOnly(user) ? typeof(UserLayout) : typeof(MainLayout);
            Routes.SetLayout(layoutType);

            Model = new ReserveStudy
                {
                    ApplicationUserId = userId,
                    Community = new Community()
                    {
                        Name = "Community 1",
                        Addresses = new List<Address>()
                        {
                            new Address()
                            {
                                Street = "123 Main St",
                                City = "Anytown",
                                State = "CA",
                                Zip = "12345"
                            }
                        }
                    },
                    Contact = new Contact()
                    {
                        FirstName = "Peter",
                        LastName = "Zurowski",
                        Email = "peter@email.com",
                        Phone = "123-456-7890",
                        Extension = "123",
                    },
                    PropertyManager = new PropertyManager()
                    {
                        FirstName = "Jeff",
                        LastName = "Ripple",
                        CompanyName = "Ripple Property Management",
                        Email = "jeff@ripple.com",
                        Phone = "123-456-7891"
                    },
                    ReserveStudyAdditionalElements = new List<ReserveStudyAdditionalElement>(),
                    IsActive = true,
                    DateCreated = DateTime.Now
                };

            context = await DbFactory.CreateDbContextAsync();
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (context != null)
        {
            await context.DisposeAsync();
        }
    }

    private async Task NextStep()
    {
        bool isValid = activeStep switch
        {
            0 => step1 != null && await step1.ValidateAsync(),
            1 => step2 != null && await step2.ValidateAsync(),
            2 => step3 != null && await step3.ValidateAsync(),
            3 => step4 != null && await step4.ValidateAsync(),
            _ => false
        };

        if (isValid)
        {
            activeStep++;
            await stepper!.NextStepAsync();
        }
        else
        {
            if (activeStep == 4)
            {
                Snackbar.Add("You must accept the terms to proceed.", Severity.Error);
            }
            else
            {
                Snackbar.Add("Please correct the errors before proceeding.", Severity.Error);
            }
        }
    }

    private async Task PreviousStep()
    {
        if (activeStep > 0)
        {
            activeStep--;
            await stepper!.PreviousStepAsync();
        }
    }

    private async Task SubmitForm()
    {
        isSubmitting = true;
        try
        {
            context.ReserveStudies.Add(Model!);
            await context.SaveChangesAsync();
            
            Snackbar.Add("Reserve Study submitted successfully!", Severity.Success);
            await NextStep();
            _completed = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void OnStepValidated(bool isValid)
    {
        stepValidationState[activeStep] = isValid;
        StateHasChanged();
    }

    private bool IsUserOnly(ClaimsPrincipal user)
    {
        return user.IsInRole("User") && !user.IsInRole("Admin") && !user.IsInRole("Specialist");
    }
}
