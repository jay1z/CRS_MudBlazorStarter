@attribute [Authorize]
@page "/ReserveStudies"
@using CRS.Data
@using CRS.Services
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Identity
@using System.Security.Claims
@inject IDbContextFactory<CRS.Data.ApplicationDbContext> DbFactory
@inject UserStateService UserState
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<PageTitle>Active Studies</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (isLoading) {
        <MudPaper Elevation="0" Class="pa-8">
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.h5" Class="mt-4">Loading Reserve Studies...</MudText>
        </MudPaper>
    }
    else if (reserveStudies == null || !reserveStudies.Any()) {
        <MudAlert Severity="Severity.Info">
            <MudText Typo="Typo.body1">No reserve studies found.</MudText>
        </MudAlert>
    }
    else {
        <MudCard Elevation="25">
            <MudCardHeader>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudText Typo="Typo.h6" Class="mt-1">@reserveStudies.Count Active Studies</MudText>
                    </MudItem>
                    <MudItem xs="12" sm="6" Class="d-flex justify-end align-center gap-2">
                        <MudTextField @bind-Value="searchString" Placeholder="Search..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Immediate="true" Class="mt-0" />
                    </MudItem>
                </MudGrid>
            </MudCardHeader>
            <MudCardContent>
                <MudTable Items="@(FilteredStudies)"
                          Dense="true"
                          Hover="true"
                          Elevation="0"
                          Loading="@isLoading"
                          SortLabel="Sort by"
                          Filter="@(study => FilterFunc(study, searchString))">
                    <HeaderContent>
                        <MudTh><MudTableSortLabel T="ReserveStudy" SortBy="@(x => x.Community.Name)">COMMUNITY</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="ReserveStudy" SortBy="@(x => x.PointOfContact.FullNameInverted)">CONTACT</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="ReserveStudy" SortBy="@(x => x.PointOfContact.Email)">EMAIL</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="ReserveStudy" SortBy="@(x => x.PointOfContact.Phone)">PHONE</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel T="ReserveStudy" SortBy="@(x => x.Specialist.FullName)">SPECIALIST</MudTableSortLabel></MudTh>
                        <MudTh></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Community">
                            <MudText Typo="Typo.h5" Class="fw-bold">@context.Community.Name</MudText>
                        </MudTd>
                        <MudTd DataLabel="Contact">
                            <MudText Typo="Typo.body1">@context.PointOfContact?.FullNameInverted</MudText>
                            <MudText Typo="Typo.caption">@context.PointOfContact?.CompanyName</MudText>
                        </MudTd>
                        <MudTd DataLabel="Email">
                            <MudLink Href="@($"mailto:{context.PointOfContact?.Email}")">@context.PointOfContact?.Email</MudLink>
                        </MudTd>
                        <MudTd DataLabel="Phone">
                            <MudText Typo="Typo.body1">@context.PointOfContact?.Phone</MudText>
                            @if (!string.IsNullOrEmpty(context.PointOfContact?.Extension)) {
                                <MudText Typo="Typo.caption">ext. @context.PointOfContact?.Extension</MudText>
                            }
                        </MudTd>
                        <MudTd DataLabel="Specialist">
                            <MudText Typo="Typo.body1">@context.Specialist?.FullName</MudText>
                            <MudText Typo="Typo.caption">@context.Specialist?.Email</MudText>
                        </MudTd>
                        <MudTd>
                            <MudButton Href="@($"ReserveStudies/Details/{context.Id}")" Size="Size.Small" Variant="Variant.Filled">
                                View
                            </MudButton>
                        </MudTd>
                    </RowTemplate>
                    <LoadingContent>
                        <MudText>Loading studies...</MudText>
                    </LoadingContent>
                    <NoRecordsContent>
                        <MudText>No matching records found</MudText>
                    </NoRecordsContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private readonly SemaphoreSlim _semaphore = new(1, 1);
    private readonly CancellationTokenSource _cts = new();
    private List<ReserveStudy> reserveStudies;
    //private ApplicationUser currentUser;
    //private IList<string> userRoles;
    private bool isLoading = true;
    private string searchString = "";

    protected override async Task OnInitializedAsync() {
        try {
            isLoading = true;
            await _semaphore.WaitAsync(_cts.Token);

            await UserState.InitializeAsync();
            await LoadReserveStudiesAsync(_cts.Token);
        }
        catch (OperationCanceledException) {
            Snackbar.Add("Operation cancelled.", Severity.Warning);
        }
        catch (Exception ex) {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            reserveStudies = new List<ReserveStudy>();
        }
        finally {
            isLoading = false;
            _semaphore.Release();
        }
    }

    private async Task LoadReserveStudiesAsync(CancellationToken cancellationToken) {
        try {
            using var context = await DbFactory.CreateDbContextAsync(cancellationToken);
            var query = context.ReserveStudies
                .AsNoTracking()
                .Include(rs => rs.Community)
                .Include(rs => rs.Contact)
                .Include(rs => rs.PropertyManager)
                .Include(rs => rs.Specialist)
                .Include(rs => rs.User)
                .AsSplitQuery();

            // Use async operation with cancellation support
            //reserveStudies = await Task.FromResult(new List<ReserveStudy>());
            reserveStudies = await (UserState.UserRoles.Contains("Admin")
                ? query.ToListAsync(cancellationToken)
                : UserState.UserRoles.Contains("Specialist")
                    ? query.Where(rs => rs.SpecialistUserId == UserState.CurrentUser.Id).ToListAsync(cancellationToken)
                    : UserState.UserRoles.Contains("User")
                        ? query.Where(rs => rs.ApplicationUserId == UserState.CurrentUser.Id).ToListAsync(cancellationToken)
                        : Task.FromResult(new List<ReserveStudy>()));
        }
        catch (DbUpdateConcurrencyException ex) {
            Snackbar.Add("Data has been modified by another user. Please refresh.", Severity.Warning);
            throw;
        }
        catch (Exception ex) {
            Snackbar.Add($"Database error: {ex.Message}", Severity.Error);
            reserveStudies = new List<ReserveStudy>();
        }
    }

    public void Dispose() {
        _cts.Cancel();
        _cts.Dispose();
        _semaphore.Dispose();
    }

    private IEnumerable<ReserveStudy> FilteredStudies => reserveStudies.Where(study => FilterFunc(study, searchString));

    private bool FilterFunc(ReserveStudy study, string searchString) {
        if (string.IsNullOrWhiteSpace(searchString)) {
            return true;
        }

        searchString = searchString.Trim().ToLower();
        return study.Community?.Name?.ToLower().Contains(searchString) == true ||
               study.PointOfContact?.FullName?.ToLower().Contains(searchString) == true ||
               study.PointOfContact?.Email?.ToLower().Contains(searchString) == true ||
               study.Specialist?.FullName?.ToLower().Contains(searchString) == true;
    }
}
