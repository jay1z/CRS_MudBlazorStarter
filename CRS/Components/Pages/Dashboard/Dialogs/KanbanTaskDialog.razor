@using CRS.Data
@using CRS.Models
@using CRS.Services
@using CRS.Services.Interfaces
@inject IKanbanService KanbanService
@inject IUserStateService UserState
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">@(Task?.Id == Guid.Empty ? "New Task" : "Edit Task")</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" Model="@Task">
            <MudTextField T="string" @bind-Value="Task.Title"
                          Label="Title" Required="true"
                          For="@(() => Task.Title)"
                          Immediate="true"
                          Validation="@(new Func<string, string>(ValidateTitle))" />

            <MudTextField T="string" @bind-Value="Task.Description"
                          Label="Description"
                          For="@(() => Task.Description)"
                          Lines="3"
                          Class="mt-3" />

            <MudSelect T="KanbanStatus" @bind-Value="Task.Status"
                       Label="Status" Required="true"
                       Class="mt-3">
                @foreach (var status in Enum.GetValues(typeof(KanbanStatus)).Cast<KanbanStatus>()) {
                    <MudSelectItem Value="@status">@GetStatusDisplayName(status)</MudSelectItem>
                }
            </MudSelect>

            <MudSelect T="Priority" @bind-Value="Task.Priority"
                       Label="Priority" Required="true"
                       Class="mt-3">
                @foreach (var priority in Enum.GetValues(typeof(Priority)).Cast<Priority>()) {
                    <MudSelectItem Value="@priority">@priority</MudSelectItem>
                }
            </MudSelect>

            <MudDatePicker @bind-Date="Task.DueDate"
                           Label="Due Date"
                           Class="mt-3" />

            <!-- Specialist selection -->
            <MudSelect T="Guid?" @bind-Value="Task.AssigneeId"
                       Label="Assigned To (Specialist)"
                       Class="mt-3"
                       AnchorOrigin="Origin.BottomCenter"
                       Variant="Variant.Outlined"
                       OnSelectionChange="OnAssigneeChanged">
                <MudSelectItem Value="@((Guid?)null)">Unassigned</MudSelectItem>
                @if (Specialists != null) {
                    @foreach (var specialist in Specialists) {
                        <MudSelectItem Value="@specialist.Id">@specialist.FullName</MudSelectItem>
                    }
                }
            </MudSelect>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Default">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Save</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
    [Parameter] public KanbanTask Task { get; set; } = new KanbanTask { Title = string.Empty };
    [Parameter] public Guid ReserveStudyId { get; set; }
    [Parameter] public List<ApplicationUser> Specialists { get; set; } = new();

    private MudForm form;

    private void OnAssigneeChanged(object value) {
        if (value is Guid assigneeId) {
            var specialist = Specialists.FirstOrDefault(s => s.Id == assigneeId);
            Task.AssigneeName = specialist?.FullName;
        }
        else {
            Task.AssigneeName = null;
        }
    }

    private string ValidateTitle(string title) {
        if (string.IsNullOrWhiteSpace(title))
            return "Title is required";
        if (title.Length < 3)
            return "Title must be at least 3 characters";
        return null;
    }

    private string GetStatusDisplayName(KanbanStatus status) {
        return status switch {
            KanbanStatus.Todo => "To Do",
            KanbanStatus.InProgress => "In Progress",
            KanbanStatus.Review => "Review",
            KanbanStatus.Done => "Done",
            _ => status.ToString()
        };
    }

    private async Task Submit() {
        await form.Validate();
        if (form.IsValid) {
            Task.ReserveStudyId = ReserveStudyId;
            MudDialog.Close(DialogResult.Ok(Task));
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
