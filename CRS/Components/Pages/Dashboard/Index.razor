@page "/Dashboard"
@attribute [Authorize]

@using CRS.Models
@using CRS.Services
@using CRS.Services.Interfaces
@implements IDisposable
@inject UserStateService UserState
@inject ISnackbar Snackbar
@inject IDashboardService DashboardService
@inject IReserveStudyService ReserveStudyService

<PageTitle>Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (_isLoading) {
        <MudPaper Elevation="0" Class="pa-8">
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.h5" Class="mt-4">Loading Dashboard...</MudText>
        </MudPaper>
    }
    else {
        <MudCard Elevation="0" Outlined="false">
            <MudCardHeader>
                <MudText Typo="Typo.h5" Class="mb-4">Dashboard</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" Class="mb-2">
                        @if (_reserveStudies.Count > 0) {
                            <MudSelect T="string" Label="Select Reserve Study" Variant="Variant.Outlined" Value="_selectedReserveStudy" ValueChanged="OnReserveStudyChanged">
                                @foreach (var study in _reserveStudies) {
                                    <MudSelectItem Value="@study.Id.ToString()">@(study.Community?.Name + " - " + study.DateCreated.Value.ToShortDateString() ?? $"Study {study.Id}")</MudSelectItem>
                                }
                            </MudSelect>
                        }
                        else {
                            <MudAlert Severity="Severity.Info" Class="mb-4">No reserve studies available for your account.</MudAlert>
                        }
                    </MudItem>

                    @if (!string.IsNullOrEmpty(_selectedReserveStudy)) {
                        <MudItem xs="12" md="4">
                            <MudCard Elevation="2" Class="h-100">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Reserve Fund Allocation (7 days)</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    @if (_chartData.Length > 0) {
                                        <MudChart ChartType="ChartType.Donut" InputLabels="@_chartLabels" InputData="@_chartData" Width="200px" Height="200px" />
                                    }
                                    else {
                                        <MudText>No data available</MudText>
                                    }
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" md="4">
                            <MudCard Elevation="2" Class="h-100">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Fund Allocations</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudTable Dense="true" Items="@fundAllocations" Hover="true" Elevation="0">
                                        <HeaderContent>
                                            <MudTh>Category</MudTh>
                                            <MudTh Style="text-align: right">Amount</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd>@context.Category</MudTd>
                                            <MudTd Style="text-align: right">@context.Amount.ToString("C0")</MudTd>
                                        </RowTemplate>
                                    </MudTable>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" md="4">
                            <MudCard Elevation="2" Class="h-100">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Recent Expenditures</MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <MudTooltip Text="Refresh data">
                                            <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Default" OnClick="RefreshData" />
                                        </MudTooltip>
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudTable Dense="true" Items="@recentExpenditures" Hover="true" Elevation="0">
                                        <HeaderContent>
                                            <MudTh>Date</MudTh>
                                            <MudTh>Category</MudTh>
                                            <MudTh Style="text-align: right">Amount</MudTh>
                                        </HeaderContent>
                                        <RowTemplate>
                                            <MudTd>@context.Date</MudTd>
                                            <MudTd>@context.Category</MudTd>
                                            <MudTd Style="text-align: right">@context.Amount.ToString("C0")</MudTd>
                                        </RowTemplate>
                                        <PagerContent>
                                            <MudTablePager HideRowsPerPage="true" HidePageNumber="true" />
                                        </PagerContent>
                                    </MudTable>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" md="8">
                            <MudCard Elevation="2">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Average Monthly Expenditure</MudText>
                                    </CardHeaderContent>
                                    <CardHeaderActions>
                                        <MudMenu Icon="@Icons.Material.Filled.FilterList" Color="Color.Default" TransformOrigin="Origin.BottomRight">
                                            <MudMenuItem>Last 6 Months</MudMenuItem>
                                            <MudMenuItem>Last Year</MudMenuItem>
                                            <MudMenuItem>All Time</MudMenuItem>
                                        </MudMenu>
                                    </CardHeaderActions>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudChart ChartType="ChartType.Line" ChartSeries="@avgExpData" XAxisLabels="@avgExpLabels" Height="300" />
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" md="4">
                            <MudCard Elevation="2" Class="h-100">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Reserve Study Locations</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudPaper Elevation="0" Class="d-flex justify-center">
                                        <MudImage Src="https://placehold.co/450x200" Alt="World Map" Class="rounded" />
                                    </MudPaper>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" md="4">
                            <MudCard Elevation="2" Class="h-100">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Highest Expenditure Categories</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudList T="ExpenditureCategory" Dense="true">
                                        @foreach (var category in highestExpenditureCategories) {
                                            <MudListItem Icon="@Icons.Material.Filled.AttachMoney">
                                                <div class="d-flex justify-space-between align-center width-100">
                                                    <span>@category.Category</span>
                                                    <span class="ml-auto">@category.Amount.ToString("C0")</span>
                                                </div>
                                            </MudListItem>
                                        }
                                    </MudList>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" md="8">
                            <MudCard Elevation="2">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Expenditure Percentile 95</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudChart ChartType="ChartType.Bar" ChartSeries="@percentileData" XAxisLabels="@percentileLabels" Height="300" />
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" md="8">
                            <MudCard Elevation="2">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Grouped Expenditure by Category</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <MudPaper Elevation="0" Class="d-flex justify-center">
                                        <MudImage Src="https://placehold.co/1000x400" Alt="Heatmap" Class="rounded" />
                                    </MudPaper>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>

                        <MudItem xs="12" md="4">
                            <MudCard Elevation="2" Class="h-100">
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">Total Expenditures</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent>
                                    <div class="d-flex flex-column align-center">
                                        <MudText Typo="Typo.h3">896</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Success">+12.5% from last month</MudText>
                                    </div>
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private bool _isLoading = true;
    private string _selectedReserveStudy = "";
    private List<ReserveStudy> _reserveStudies = new();
    private Timer? _refreshTimer;

    // Chart data
    private string[] _chartLabels = { };
    private double[] _chartData = { };

    private string[] avgExpLabels = { };
    private List<ChartSeries> avgExpData = new();

    // Tables data
    private List<FundAllocation> fundAllocations = new();
    private List<Expenditure> recentExpenditures = new();
    private List<ExpenditureCategory> highestExpenditureCategories = new();

    private string[] percentileLabels = { };
    private List<ChartSeries> percentileData = new();

    protected override async Task OnInitializedAsync() {
        await LoadReserveStudiesAsync();

        // Set up periodic refresh
        _refreshTimer = new Timer(async _ => {
            await InvokeAsync(async () => {
                await RefreshData();
            });
        }, null, TimeSpan.FromMinutes(5), TimeSpan.FromMinutes(5));
    }

    private async Task LoadReserveStudiesAsync() {
        try {
            _isLoading = true;

            await UserState.InitializeAsync();

            // Get user ID from UserState
            var userId = UserState.CurrentUser.Id;

            // Fetch studies based on role
            if (UserState.IsInRole("Admin")) {
                // Admins can see all studies
                _reserveStudies = await ReserveStudyService.GetAllReserveStudiesAsync();
            }
            else if (UserState.IsInRole("Specialist")) {
                // Specialists can only see studies they're assigned to
                _reserveStudies = await ReserveStudyService.GetAssignedReserveStudiesAsync(userId);
            }
            else {
                // Regular users can only see studies they own
                _reserveStudies = await ReserveStudyService.GetOwnedReserveStudiesAsync(userId);
            }

            // Filter for active studies only
            _reserveStudies = _reserveStudies.Where(s => s.IsActive).OrderBy(s => s.DateCreated).ToList();

            // Set default selection if we have studies
            if (_reserveStudies.Count > 0) {
                _selectedReserveStudy = _reserveStudies[0].Id.ToString();
                await LoadDashboardDataAsync();
            }
            else {
                _isLoading = false;
            }
        }
        catch (Exception ex) {
            _isLoading = false;
            Snackbar.Add($"Error loading reserve studies: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadDashboardDataAsync() {
        try {
            await UserState.InitializeAsync();

            if (string.IsNullOrEmpty(_selectedReserveStudy)) {
                _isLoading = false;
                return;
            }

            _isLoading = true;

            // Parse the selected reserve study ID
            if (!Guid.TryParse(_selectedReserveStudy, out var studyId)) {
                throw new Exception("Invalid reserve study ID");
            }

            // Load chart data
            var dashboardData = await DashboardService.GetDashboardDataAsync(studyId);

            // Update all dashboard components with real data
            _chartLabels = dashboardData.FundAllocationLabels;
            _chartData = dashboardData.FundAllocationData;

            avgExpLabels = dashboardData.MonthlyLabels;
            avgExpData = dashboardData.MonthlyExpenditureSeries;

            fundAllocations = dashboardData.FundAllocations;
            recentExpenditures = dashboardData.RecentExpenditures;
            highestExpenditureCategories = dashboardData.HighestExpenditureCategories;

            percentileLabels = dashboardData.PercentileLabels;
            percentileData = dashboardData.PercentileData;

            _isLoading = false;
        }
        catch (Exception ex) {
            _isLoading = false;
            Snackbar.Add($"Error loading dashboard data: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnReserveStudyChanged(string value) {
        _selectedReserveStudy = value;
        await LoadDashboardDataAsync();
    }

    private async Task RefreshData() {
        await LoadReserveStudiesAsync();
        Snackbar.Add("Dashboard data refreshed", Severity.Success);
    }

    public void Dispose() {
        _refreshTimer?.Dispose();
    }

    // Data models
    public record FundAllocation(string Category, double Amount);
    public record Expenditure(string Date, string Category, double Amount);
    public record ExpenditureCategory(string Category, double Amount);
}
