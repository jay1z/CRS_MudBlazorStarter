@page "/Dashboard"
@attribute [Authorize]

@using CRS.Components.Dialogs
@using CRS.Components.Pages.Dashboard.Dialogs
@using CRS.Data
@using CRS.Models
@using CRS.Services
@using CRS.Services.Interfaces
@using System.Security.Claims
@implements IDisposable
@inject UserStateService UserState
@inject ISnackbar Snackbar
@inject IDashboardService DashboardService
@inject IReserveStudyService ReserveStudyService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Dashboard</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
    @if (_isLoading) {
        <MudPaper Elevation="0" Class="pa-8">
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.h5" Class="mt-4">Loading Dashboard...</MudText>
        </MudPaper>
    } else {
        <MudCard Elevation="0" Outlined="false">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5" Class="mb-4">Dashboard</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    <MudTooltip Text="Refresh Dashboard">
                        <MudIconButton Icon="@Icons.Material.Filled.Refresh" Color="Color.Primary" OnClick="@(() => RefreshData())" Disabled="_isRefreshing" />
                    </MudTooltip>
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" Class="mb-2">
                        @if (_reserveStudies.Count > 0) {
                            <MudSelect T="string" Label="Select Reserve Study" Variant="Variant.Outlined" Value="_selectedReserveStudy" ValueChanged="OnReserveStudyChanged">
                                @if (UserState.IsInRole("Admin")) {
                                    <MudSelectItem Value="@("all")">All Reserve Studies</MudSelectItem>
                                }
                                @foreach (var study in _reserveStudies) {
                                    <MudSelectItem Value="@study.Id.ToString()">
                                        @(GetStudyDisplayName(study))
                                    </MudSelectItem>
                                }
                            </MudSelect>
                        } else {
                            <MudAlert Severity="Severity.Info" Class="mb-4">No reserve studies available for your account.</MudAlert>
                        }
                    </MudItem>

                    @if (!string.IsNullOrEmpty(_selectedReserveStudy)) {
                        <!-- Study Status Information -->
                        @if (_selectedReserveStudy != "all") {
                            <MudItem xs="12" Class="mb-3">
                                <MudPaper Elevation="0" Class="pa-3 d-flex align-center">
                                    <MudIcon Icon="@GetStudyStatusIcon()" Color="@GetStudyStatusColor()" Class="mr-3" />
                                    <div class="flex-grow-1">
                                        <MudText Typo="Typo.subtitle1">Study Status: @GetStudyStatusText()</MudText>
                                        <MudText Typo="Typo.caption">@GetStudyStatusDescription()</MudText>
                                    </div>
                                    @if (_shouldShowGenerateTasksButton) {
                                        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="GenerateTasksForCurrentStudy" StartIcon="@Icons.Material.Filled.Autorenew" Disabled="_isTaskGenerating">
                                            Generate Tasks
                                        </MudButton>
                                    }
                                </MudPaper>
                            </MudItem>
                        } else {
                            <MudItem xs="12" Class="mb-3">
                                <MudPaper Elevation="0" Class="pa-3 d-flex align-center">
                                    <MudIcon Icon="@Icons.Material.Filled.ViewList" Color="Color.Info" Class="mr-3" />
                                    <div class="flex-grow-1">
                                        <MudText Typo="Typo.subtitle1">Viewing All Reserve Studies</MudText>
                                        <MudText Typo="Typo.caption">Select a specific study to view detailed progress</MudText>
                                    </div>
                                </MudPaper>
                            </MudItem>
                        }

                        <!-- Workflow Status Chart Section -->
                        <MudItem xs="12">
                            @if (_selectedReserveStudy == "all") {
                                <MudAlert Severity="Severity.Info" Class="mb-4">
                                    Please select a specific reserve study to view its timeline chart.
                                </MudAlert>
                            } else if (_currentStudy != null) {
                                <WorkflowStatusChart ReserveStudy="_currentStudy" ChartId="@($"chart-{_currentStudy.Id}")" />
                            }
                        </MudItem>

                        <!-- Task Summary Cards -->
                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="12" md="6" lg="3">
                                    <MudCard Elevation="2">
                                        <MudCardHeader>
                                            <CardHeaderAvatar>
                                                <MudIcon Icon="@Icons.Material.Filled.Assignment" Color="Color.Error" />
                                            </CardHeaderAvatar>
                                            <CardHeaderContent>
                                                <MudText Typo="Typo.body1">Tasks To Do</MudText>
                                                <MudText Typo="Typo.h5">@(_currentStudy != null ? GetTaskCountByStatus(KanbanStatus.Todo) : 0)</MudText>
                                            </CardHeaderContent>
                                        </MudCardHeader>
                                    </MudCard>
                                </MudItem>
                                <MudItem xs="12" md="6" lg="3">
                                    <MudCard Elevation="2">
                                        <MudCardHeader>
                                            <CardHeaderAvatar>
                                                <MudIcon Icon="@Icons.Material.Filled.Autorenew" Color="Color.Warning" />
                                            </CardHeaderAvatar>
                                            <CardHeaderContent>
                                                <MudText Typo="Typo.body1">In Progress</MudText>
                                                <MudText Typo="Typo.h5">@(_currentStudy != null ? GetTaskCountByStatus(KanbanStatus.InProgress) : 0)</MudText>
                                            </CardHeaderContent>
                                        </MudCardHeader>
                                    </MudCard>
                                </MudItem>
                                <MudItem xs="12" md="6" lg="3">
                                    <MudCard Elevation="2">
                                        <MudCardHeader>
                                            <CardHeaderAvatar>
                                                <MudIcon Icon="@Icons.Material.Filled.RateReview" Color="Color.Info" />
                                            </CardHeaderAvatar>
                                            <CardHeaderContent>
                                                <MudText Typo="Typo.body1">In Review</MudText>
                                                <MudText Typo="Typo.h5">@(_currentStudy != null ? GetTaskCountByStatus(KanbanStatus.Review) : 0)</MudText>
                                            </CardHeaderContent>
                                        </MudCardHeader>
                                    </MudCard>
                                </MudItem>
                                <MudItem xs="12" md="6" lg="3">
                                    <MudCard Elevation="2">
                                        <MudCardHeader>
                                            <CardHeaderAvatar>
                                                <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />
                                            </CardHeaderAvatar>
                                            <CardHeaderContent>
                                                <MudText Typo="Typo.body1">Completed</MudText>
                                                <MudText Typo="Typo.h5">@(_currentStudy != null ? GetTaskCountByStatus(KanbanStatus.Done) : 0)</MudText>
                                            </CardHeaderContent>
                                        </MudCardHeader>
                                    </MudCard>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    }
                </MudGrid>
            </MudCardContent>
        </MudCard>
    }
</MudContainer>

@code {
    private bool _isLoading = true;
    private bool _isTaskGenerating = false;
    private string _selectedReserveStudy = "";
    private List<ReserveStudy> _reserveStudies = new();
    private Timer? _refreshTimer;
    private ReserveStudy? _currentStudy;
    private bool _isRefreshing = false;
    private bool _shouldShowGenerateTasksButton;

    // Simplified task tracking for status counts
    private List<KanbanTask> kanbanTasks = new();
    private Dictionary<Guid, string> _studyNameCache = new();
    private const int MaxCacheSize = 200;

    protected override async Task OnInitializedAsync() {
        try {
            await LoadReserveStudiesAsync();

            // Set up periodic refresh as a fallback (every5 minutes)
            _refreshTimer = new Timer(async _ => {
                try {
                    await InvokeAsync(async () => await RefreshData(showNotification: false));
                } catch (Exception ex) {
                    Console.WriteLine($"Error in refresh timer: {ex}");
                }
            }, null, TimeSpan.FromMinutes(5), TimeSpan.FromMinutes(5));
        } catch (Exception ex) {
            Console.WriteLine($"Error in OnInitializedAsync: {ex}");
            Snackbar.Add($"Error initializing dashboard: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadReserveStudiesAsync() {
        try {
            _isLoading = true;

            // Ensure the user state is fresh and subscribe to auth state once in the service
            await UserState.InitializeAsync();

            // If not authenticated, bail out gracefully
            if (!UserState.IsAuthenticated) {
                _isLoading = false;
                Snackbar.Add("No authenticated user available.", Severity.Error);
                return;
            }

            // Resolve user id from claims (cheap, avoids DB lookup)
            Guid userId = Guid.Empty;
            if (!UserState.IsInRole("Admin")) {
                var idClaim = UserState.ClaimsPrincipal?.FindFirst(ClaimTypes.NameIdentifier)?.Value;
                if (!Guid.TryParse(idClaim, out userId)) {
                    _isLoading = false;
                    Snackbar.Add("Unable to resolve current user id.", Severity.Error);
                    return;
                }
            }

            // Fetch studies based on role
            if (UserState.IsInRole("Admin")) {
                _reserveStudies = await ReserveStudyService.GetAllReserveStudiesAsync();
            } else if (UserState.IsInRole("Specialist")) {
                _reserveStudies = await ReserveStudyService.GetAssignedReserveStudiesAsync(userId);
            } else {
                _reserveStudies = await ReserveStudyService.GetOwnedReserveStudiesAsync(userId);
            }

            // Filter for active studies only
            _reserveStudies = _reserveStudies.Where(s => s.IsActive).OrderBy(s => s.DateCreated).ToList();
            PreloadStudyNameCache();

            // Set default selection if we have studies
            if (_reserveStudies.Count > 0) {
                _selectedReserveStudy = _reserveStudies[0].Id.ToString();
                await LoadDashboardDataAsync();
            } else {
                _isLoading = false;
            }
        } catch (Exception ex) {
            _isLoading = false;
            Snackbar.Add($"Error loading reserve studies: {ex.Message}", Severity.Error);
        }
    }

    private async Task LoadDashboardDataAsync() {
        try {
            if (string.IsNullOrEmpty(_selectedReserveStudy) || _selectedReserveStudy == "all") {
                _isLoading = false;
                return;
            }

            _isLoading = true;

            if (!Guid.TryParse(_selectedReserveStudy, out var studyId)) {
                throw new Exception("Invalid reserve study ID");
            }

            // Find the current study
            _currentStudy = _reserveStudies.FirstOrDefault(s => s.Id == studyId);

            // Load task data to update the summary cards
            //await LoadKanbanTasksAsync(studyId);
            //_shouldShowGenerateTasksButton = await ShouldShowGenerateTasksButton();

            _isLoading = false;
        } catch (Exception ex) {
            _isLoading = false;
            Snackbar.Add($"Error loading dashboard data: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnReserveStudyChanged(string value) {
        _selectedReserveStudy = value;

        if (value == "all") {
            // Special case for "All Reserve Studies" option
            _currentStudy = null;
            kanbanTasks.Clear();
            _isLoading = false;
        } else {
            await LoadDashboardDataAsync();
        }
    }

    private async Task RefreshData(bool showNotification = true) {
        if (_isRefreshing)
            return;

        try {
            _isRefreshing = true;
            ClearStudyCache();

            if (!string.IsNullOrEmpty(_selectedReserveStudy) && Guid.TryParse(_selectedReserveStudy, out var studyId)) {
                // Reload the current study to refresh the chart data
                await LoadDashboardDataAsync();
            }

            if (showNotification) {
                Snackbar.Add("Dashboard data refreshed", Severity.Success);
            }
        } catch (Exception ex) {
            if (showNotification) {
                Snackbar.Add($"Error refreshing data: {ex.Message}", Severity.Error);
            }
        } finally {
            _isRefreshing = false;
        }
    }

    //private async Task LoadKanbanTasksAsync(Guid studyId) {
    // try {
    // if (DashboardService.KanbanService != null)
    // kanbanTasks = await DashboardService.KanbanService.GetTasksForReserveStudyAsync(studyId);
    // else
    // kanbanTasks = new List<KanbanTask>();
    // } catch (Exception ex) {
    // Snackbar.Add($"Error loading tasks: {ex.Message}", Severity.Error);
    // kanbanTasks = new List<KanbanTask>();
    // }
    //}

    private int GetTaskCountByStatus(KanbanStatus status) {
        return kanbanTasks.Count(t => t.Status == status && !t.DateDeleted.HasValue);
    }

    private string GetStudyDisplayName(ReserveStudy study) {
        // Cache the result for this study ID for future lookups
        var result = string.Empty;

        if (study.Community?.Name != null && study.DateCreated.HasValue) {
            result = $"{study.Community.Name} - {study.DateCreated.Value.ToShortDateString()}";
        } else if (study.Community?.Name != null) {
            result = study.Community.Name;
        } else if (study.DateCreated.HasValue) {
            result = $"Study {study.Id} - {study.DateCreated.Value.ToShortDateString()}";
        } else {
            result = $"Study {study.Id}";
        }

        // Cache the result
        _studyNameCache[study.Id] = result;
        return result;
    }

    private void PreloadStudyNameCache() {
        foreach (var study in _reserveStudies) {
            _studyNameCache[study.Id] = GetStudyDisplayName(study);
        }
    }

    private void ClearStudyCache() {
        _studyNameCache.Clear();
    }

    private async Task<bool> ShouldShowGenerateTasksButton() {
        // Show the generate tasks button if:
        //1. Current study exists
        //2. Study is not completed
        //3. User has appropriate permissions (Admin or Specialist)
        await UserState.InitializeAsync();
        return _currentStudy != null &&
        !_currentStudy.IsComplete &&
        (UserState.IsInRole("Admin") || UserState.IsInRole("Specialist"));
    }

    private async Task GenerateTasksForCurrentStudy() {
        if (_currentStudy == null || !Guid.TryParse(_selectedReserveStudy, out var studyId)) {
            Snackbar.Add("No valid reserve study selected", Severity.Warning);
            return;
        }

        try {
            _isTaskGenerating = true;
            var tasksToCreate = await DashboardService.GenerateTasksBasedOnStudyStatusAsync(studyId);

            if (tasksToCreate.Count == 0) {
                Snackbar.Add("All required tasks already exist for this study", Severity.Info);
                return;
            }

            // Create tasks using the DashboardService
            await DashboardService.CreateTasksForStudyAsync(tasksToCreate);

            // Refresh the task data
            //await LoadKanbanTasksAsync(studyId);
            //StateHasChanged();

            Snackbar.Add($"Successfully generated {tasksToCreate.Count} new tasks for this study", Severity.Success);
        } catch (Exception ex) {
            Snackbar.Add($"Error generating tasks: {ex.Message}", Severity.Error);
        } finally {
            _isTaskGenerating = false;
        }
    }

    // Study status-related methods
    private string GetStudyStatusText() {
        if (_currentStudy == null) return "Unknown";

        if (_currentStudy.IsComplete) return "Completed";
        if (_currentStudy.IsApproved) return "Approved";
        return "In Progress";
    }

    private string GetStudyStatusDescription() {
        if (_currentStudy == null) return "";

        if (_currentStudy.IsComplete) {
            return $"This study was completed on {_currentStudy.LastModified?.ToString("MM/dd/yyyy") ?? "N/A"}";
        }

        if (_currentStudy.IsApproved) {
            return $"This study was approved on {_currentStudy.DateApproved?.ToString("MM/dd/yyyy") ?? "N/A"}";
        }

        return "This study is currently in progress.";
    }

    private string GetStudyStatusIcon() {
        if (_currentStudy == null) return Icons.Material.Filled.Help;

        if (_currentStudy.IsComplete) return Icons.Material.Filled.CheckCircle;
        if (_currentStudy.IsApproved) return Icons.Material.Filled.ThumbUp;
        return Icons.Material.Filled.Build;
    }

    private Color GetStudyStatusColor() {
        if (_currentStudy == null) return Color.Default;

        if (_currentStudy.IsComplete) return Color.Success;
        if (_currentStudy.IsApproved) return Color.Info;
        return Color.Primary;
    }

    public void Dispose() {
        try {
            _refreshTimer?.Dispose();
        } catch (Exception ex) {
            // Log but don't throw from Dispose
            Console.WriteLine($"Error in Dispose: {ex.Message}");
        }
    }
}