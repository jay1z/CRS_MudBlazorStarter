@page "/Admin/Tenants"

@using CRS.Models
@using CRS.Data
@using CRS.Services.Tenant
@using CRS.Services
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Authorization
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject ThemeService ThemeService
@inject ITenantContext TenantContext
@inject ILogger<CRS.Components.Pages.Admin.Tenants> Logger
@inject IJSRuntime JS
@inject IUserSettingsService UserSettingsService

<AuthorizeView Roles="Admin">
    <Authorized>
        <MudContainer MaxWidth="MaxWidth.Large" Class="mt-6">
            <MudPaper Elevation="4" Class="pa-4">
                <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="mb-4">
                    <MudText Typo="Typo.h5">Tenants</MudText>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => OpenEditDialog(new Tenant { IsActive = true }))" StartIcon="@Icons.Material.Filled.Add">New Tenant</MudButton>
                </MudStack>

                <MudText Typo="Typo.subtitle2" Class="mb-2">Debug: editingTenantId=@(editingTenant?.Id.ToString() ?? "null")</MudText>

                <MudTable Items="tenants" Hover="true" Dense="true" Bordered="true">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Subdomain</MudTh>
                        <MudTh>Is Active</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="tenant">
                        <MudTd DataLabel="ID">@tenant.Id</MudTd>
                        <MudTd DataLabel="Name">@tenant.Name</MudTd>
                        <MudTd DataLabel="Subdomain">@tenant.Subdomain</MudTd>
                        <MudTd DataLabel="Is Active">@(tenant.IsActive ? "Yes" : "No")</MudTd>
                        <MudTd>
                            <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" OnClick="@(() => OpenEditDialog(tenant))" />
                            <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" OnClick="@(() => SelectTenantAsync(tenant))" Title="Select tenant" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" OnClick="@(() => DeleteAsync(tenant))" Disabled="@(tenant.Id ==1)" />
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudContainer>
    </Authorized>
    <NotAuthorized>
        <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-6">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h6">Access denied</MudText>
                <MudText>Administrator access is required to view this page.</MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="/Account/Login">Sign in</MudButton>
            </MudPaper>
        </MudContainer>
    </NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] private Task<AuthenticationState> AuthenticationStateTask { get; set; } = default!;

    private List<Tenant> tenants = new();
    private Tenant? editingTenant;
    private Tenant? _dialogSource;
    private bool _showDialogOnAfterRender = false;

    protected override async Task OnInitializedAsync() {
        await LoadAsync();
    }

    private async Task LoadAsync() {
        try {
            await using var db = await DbFactory.CreateDbContextAsync();
            tenants = await db.Set<Tenant>().OrderBy(t => t.Id).ToListAsync();
            Logger.LogInformation("Loaded {Count} tenants", tenants.Count);
        } catch (Exception ex) {
            Snackbar.Add($"Error loading tenants: {ex.Message}", Severity.Error);
            Logger.LogError(ex, "Error loading tenants");
        }
    }

    private void OpenEditDialog(Tenant source) {
        _dialogSource = new Tenant {
            Id = source.Id,
            Name = source.Name,
            Subdomain = source.Subdomain,
            IsActive = source.IsActive,
            BrandingJson = source.BrandingJson,
            CreatedAt = source.CreatedAt
        };
        _showDialogOnAfterRender = true;
        StateHasChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (_showDialogOnAfterRender && _dialogSource != null) {
            _showDialogOnAfterRender = false;
            var parameters = new DialogParameters { ["Source"] = _dialogSource };
            var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Large, FullWidth = true };
            var dialog = await DialogService.ShowAsync<EditTenantDialog>("Edit Tenant", parameters, options);
            var result = await dialog.Result;
            if (result.Data is Tenant saved) {
                var existing = tenants.FirstOrDefault(t => t.Id == saved.Id);
                if (existing != null) {
                    existing.Name = saved.Name;
                    existing.Subdomain = saved.Subdomain;
                    existing.IsActive = saved.IsActive;
                    existing.BrandingJson = saved.BrandingJson;
                } else {
                    tenants.Insert(0, saved);
                }
                tenants = tenants.ToList();
                await InvokeAsync(StateHasChanged);
            } else {
                await LoadAsync();
                await InvokeAsync(StateHasChanged);
            }
        }
    }

    private async Task DeleteAsync(Tenant tenant) {
        if (tenant.Id == 1) {
            Snackbar.Add("Default tenant cannot be deleted.", Severity.Warning);
            return;
        }
        var confirmed = (await DialogService.ShowMessageBox("Confirm Delete", (MarkupString)$"Are you sure you want to delete tenant '<b>{tenant.Name}</b>'?", yesText: "Delete", cancelText: "Cancel")) == true;
        if (!confirmed) return;
        try {
            await using var db = await DbFactory.CreateDbContextAsync();
            var existing = await db.Set<Tenant>().FirstOrDefaultAsync(t => t.Id == tenant.Id);
            if (existing is null) {
                Snackbar.Add("Tenant not found.", Severity.Error);
                return;
            }
            db.Remove(existing);
            await db.SaveChangesAsync();
            Snackbar.Add("Deleted.", Severity.Success);
            await LoadAsync();
        } catch (Exception ex) {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            Logger.LogError(ex, "Error deleting tenant {TenantId}", tenant.Id);
        }
    }

    private async Task SelectTenantAsync(Tenant tenant) {
        try {
            // Set tenant into the scoped TenantContext so other pages (like HomepageEditor) will see it
            TenantContext.TenantId = tenant.Id;
            TenantContext.TenantName = tenant.Name;
            TenantContext.Subdomain = tenant.Subdomain;
            TenantContext.IsActive = tenant.IsActive;
            TenantContext.BrandingJson = tenant.BrandingJson;

            // Persist selection to localStorage for convenience across reloads
            try { await JS.InvokeVoidAsync("localStorage.setItem", "selectedTenantId", tenant.Id.ToString()); } catch { }

            // Persist selection to user settings (if logged in)
            try {
                var authState = await AuthenticationStateTask;
                var user = authState.User;
                if (user?.Identity?.IsAuthenticated == true) {
                    var idClaim = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
                    if (Guid.TryParse(idClaim, out var userId)) {
                        await UserSettingsService.SetSettingAsync(userId, "selectedTenantId", tenant.Id.ToString());
                    }
                }
            } catch { }

            Snackbar.Add($"Selected tenant: {tenant.Name}", Severity.Success);
            // Apply tenant branding immediately via ThemeService if available
            try { ThemeService.ApplyTenantBrandingIfAvailableAndChanged(); } catch { }
        } catch (Exception ex) {
            Snackbar.Add($"Error selecting tenant: {ex.Message}", Severity.Error);
        }
    }
}
