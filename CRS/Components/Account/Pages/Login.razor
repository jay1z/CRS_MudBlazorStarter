@attribute [AllowAnonymous]
@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using CRS.Data
@using CRS.Services.Tenant
@using CRS.Services.License
@using Microsoft.EntityFrameworkCore

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ITenantContext TenantContext
@inject ILicenseValidationService LicenseValidator
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ThemeService ThemeService

<PageTitle>Log in</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Log in</MudText>

<MudGrid>
    <MudItem md="6">
        <StatusMessage Message="@errorMessage" />
        <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
            <DataAnnotationsValidator />

            <MudText GutterBottom="true" Typo="Typo.body1">Use a local account to log in.</MudText>

            <MudGrid>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Email)" @bind-Value="Input.Email"
                                        Label="Email" Placeholder="name@example.com"
                                        UserAttributes="@(new() { { "autocomplete", "username" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticTextField For="@(() => Input.Password)" @bind-Value="Input.Password"
                                        Label="Password" InputType="InputType.Password" Placeholder="password"
                                        UserAttributes="@(new() { { "autocomplete", "current-password" }, { "aria-required", "true" } } )" />
                </MudItem>
                <MudItem md="12">
                    <MudStaticCheckBox For="@(() => Input.RememberMe)" @bind-Value="Input.RememberMe">Remember me</MudStaticCheckBox>
                </MudItem>
                <MudItem md="12">
                    <MudStaticButton Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" FormAction="FormAction.Submit">Log in</MudStaticButton>
                </MudItem>
            </MudGrid>
        </EditForm>

        <MudGrid Class="mt-4">
            <MudItem md="12">
                <MudLink Href="Account/ForgotPassword">Forgot your password?</MudLink><br />
                <MudLink Href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</MudLink><br />
                <MudLink Href="Account/ResendEmailConfirmation">Resend email confirmation</MudLink>
            </MudItem>
        </MudGrid>
    </MudItem>
    <MudItem md="6">
        <MudText GutterBottom="true" Typo="Typo.body1">Use another service to log in.</MudText>

        <ExternalLoginPicker />
    </MudItem>
</MudGrid>

@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync() {
        if (HttpMethods.IsGet(HttpContext.Request.Method)) {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task LoginUser() {
        errorMessage = null;

        // This doesn't count login failures towards account lockout
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded) {
            Logger.LogInformation("User logged in.");

            // SaaS Refactor: Tenant match and license check
            try {
                var user = await UserManager.FindByEmailAsync(Input.Email);
                if (user is null) {
                    await SignInManager.SignOutAsync();
                    errorMessage = "Error: Invalid login attempt.";
                    return;
                }

                // If middleware resolved a tenant, require a match.
                if (TenantContext.TenantId.HasValue) {
                    var currentTenantId = TenantContext.TenantId.Value;
                    if (user.TenantId != currentTenantId) {
                        await SignInManager.SignOutAsync();
                        errorMessage = "Error: You are trying to sign in to the wrong tenant.";
                        return;
                    }
                }
                else {
                    // No tenant resolved (common on localhost). Adopt user's tenant for this session.
                    try {
                        TenantContext.TenantId = user.TenantId;
                        TenantContext.IsResolvedByLogin = true;
                        // try to resolve tenant name for UI
                        try {
                            await using var db = await DbFactory.CreateDbContextAsync();
                            var tenant = await db.Tenants.FindAsync(user.TenantId);
                            if (tenant != null) TenantContext.TenantName = tenant.Name;
                        } catch { }
                        try { ThemeService.ApplyTenantBrandingIfAvailableAndChanged(); } catch { }
                        // Ensure UI that listens for theme/tenant changes updates immediately
                        try { ThemeService.NotifyThemeChanged(); } catch { }
                    } catch (Exception ex) {
                        Logger.LogWarning(ex, "Failed to set TenantContext from user after login");
                    }
                }

                // Re-issue authentication cookie including tenant claims so UI (EnvironmentBanner) that reads claims sees tenant
                try {
                    var additionalClaims = new List<System.Security.Claims.Claim>();
                    if (user.TenantId != null) {
                        additionalClaims.Add(new System.Security.Claims.Claim("tenant_id", user.TenantId.ToString()));
                    }
                    if (!string.IsNullOrWhiteSpace(TenantContext.TenantName)) {
                        additionalClaims.Add(new System.Security.Claims.Claim("tenant_name", TenantContext.TenantName!));
                    }
                    // Sign out the current cookie and sign in with additional claims
                    await SignInManager.SignOutAsync();
                    var authProps = new AuthenticationProperties { IsPersistent = Input.RememberMe };
                    await SignInManager.SignInWithClaimsAsync(user, authProps, additionalClaims);
                } catch (Exception ex) {
                    Logger.LogWarning(ex, "Failed to attach tenant claims to authentication cookie");
                }

                // Optional: license active check
                var isActive = await LicenseValidator.IsTenantActiveAsync(TenantContext.TenantId.Value);
                if (!isActive) {
                    await SignInManager.SignOutAsync();
                    errorMessage = "Error: This tenant is inactive. Please contact support.";
                    return;
                }
            }
            catch (Exception ex) {
                Logger.LogError(ex, "Tenant validation failed during login");
                await SignInManager.SignOutAsync();
                errorMessage = "Error: Login failed due to tenant validation.";
                return;
            }

            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor) {
            RedirectManager.RedirectTo("Account/LoginWith2fa", new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut) {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
