@using CRS.Components.Editors.Models
@using System.Text.Json
@using System.IO
@inject ISnackbar Snackbar
@inject HttpClient Http

<MudPaper Class="pa-2">
    <MudText Typo="Typo.h6">Inspector</MudText>
    <MudDivider Class="my-2" />
    @if (SelectedBlock == null) {
        <MudText Typo="Typo.body2">Select a block to edit its properties.</MudText>
    } else {
        <MudTextField Label="Type" Value="@SelectedBlock.Type" Disabled="true" />
        <MudTextField Label="Title" @bind-Value="Title" />
        <MudTextField Label="Subtitle" @bind-Value="Subtitle" />

        @if (SelectedBlock.Type == "image") {
            <MudText Typo="Typo.subtitle2" Class="mt-2">Image</MudText>
            <div class="mb-2">
                @if (!string.IsNullOrWhiteSpace(ImageUrl)) {
                    <img src="@ImageUrl" alt="image preview" style="max-width:100%;border:1px solid #eee;padding:4px;" />
                }
            </div>
            <InputFile OnChange="OnInputFileChange" />
            <MudText Typo="Typo.caption" Class="mt-1">Allowed types: jpg, png, gif, webp. Max5 MB.</MudText>

            <MudDivider Class="my-2" />
            <MudButton Variant="Variant.Outlined" OnClick="OpenLibrary">Choose from library</MudButton>

            @if (isLibraryOpen) {
                <MudPaper Class="pa-2 mt-2">
                    <MudText Typo="Typo.subtitle2">Media Library</MudText>
                    @if (libraryFiles == null) {
                        <MudProgressCircular Indeterminate="true" Size="Size.Small" Class="my-2" />
                    } else if (!libraryFiles.Any()) {
                        <MudAlert Severity="Severity.Info">No files uploaded for this tenant.</MudAlert>
                    } else {
                        <MudGrid>
                            @foreach (var f in libraryFiles) {
                                <MudItem xs="6">
                                    <MudPaper Class="pa-2 d-flex flex-column align-center" Style="cursor:pointer;" @onclick="() => SelectFromLibrary(f)">
                                        <img src="@f" style="max-width:100%;height:64px;object-fit:cover;" />
                                        <MudText Typo="Typo.caption" Class="mt-1">@System.IO.Path.GetFileName(f)</MudText>
                                    </MudPaper>
                                </MudItem>
                            }
                        </MudGrid>
                    }
                </MudPaper>
            }
        }

        <MudButton Variant="Variant.Filled" OnClick="Save" Class="mt-3">Save</MudButton>
    }
</MudPaper>

@code {
    [Parameter] public CRS.Components.Editors.Models.Block? SelectedBlock { get; set; }
    [Parameter] public EventCallback<CRS.Components.Editors.Models.Block> OnUpdated { get; set; }
    private string? Title;
    private string? Subtitle;
    private string? ImageUrl;

    private bool isLibraryOpen = false;
    private string[]? libraryFiles;

    protected override void OnParametersSet() {
        if (SelectedBlock != null) {
            SelectedBlock.Props ??= new Dictionary<string, object>();
            Title = SelectedBlock.Props.TryGetValue("title", out var t) ? t?.ToString() : null;
            Subtitle = SelectedBlock.Props.TryGetValue("subtitle", out var s) ? s?.ToString() : null;
            ImageUrl = SelectedBlock.Props.TryGetValue("imageUrl", out var i) ? i?.ToString() : null;
        }
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e) {
        var file = e.File;
        if (file == null) return;
        if (file.Size > 5 * 1024 * 1024) {
            Snackbar.Add("File too large (max5MB).", Severity.Error);
            return;
        }
        var ext = Path.GetExtension(file.Name).ToLowerInvariant();
        var allowed = new[] { ".jpg", ".jpeg", ".png", ".gif", ".webp" };
        if (!allowed.Contains(ext)) {
            Snackbar.Add("Invalid file type.", Severity.Error);
            return;
        }

        try {
            var content = new MultipartFormDataContent();
            var stream = file.OpenReadStream(5 * 1024 * 1024);
            var streamContent = new StreamContent(stream);
            streamContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(file.ContentType ?? "application/octet-stream");
            content.Add(streamContent, "file", file.Name);

            var resp = await Http.PostAsync("/api/upload", content);
            if (!resp.IsSuccessStatusCode) {
                var txt = await resp.Content.ReadAsStringAsync();
                Snackbar.Add($"Upload failed: {resp.StatusCode} {txt}", Severity.Error);
                return;
            }
            var json = await resp.Content.ReadFromJsonAsync<JsonElement>();
            if (json.TryGetProperty("url", out var urlProp)) {
                var url = urlProp.GetString();
                if (SelectedBlock != null) {
                    SelectedBlock.Props ??= new Dictionary<string, object>();
                    SelectedBlock.Props["imageUrl"] = url ?? string.Empty;
                    SelectedBlock.Props["alt"] = SelectedBlock.Props.TryGetValue("alt", out var a) ? a?.ToString() ?? string.Empty : string.Empty;
                    ImageUrl = url;
                    if (OnUpdated.HasDelegate) await OnUpdated.InvokeAsync(SelectedBlock);
                    Snackbar.Add("Upload successful.", Severity.Success);
                }
            } else {
                Snackbar.Add("Upload response did not contain url.", Severity.Error);
            }
        } catch (Exception ex) {
            Snackbar.Add($"Upload error: {ex.Message}", Severity.Error);
        }
    }

    private async Task OpenLibrary() {
        isLibraryOpen = !isLibraryOpen;
        if (isLibraryOpen) {
            try {
                var resp = await Http.GetAsync("/api/upload");
                if (resp.IsSuccessStatusCode) {
                    var json = await resp.Content.ReadFromJsonAsync<JsonElement>();
                    if (json.TryGetProperty("files", out var filesProp) && filesProp.ValueKind == JsonValueKind.Array) {
                        var list = new List<string>();
                        foreach (var item in filesProp.EnumerateArray()) {
                            if (item.ValueKind == JsonValueKind.String) list.Add(item.GetString() ?? string.Empty);
                        }
                        libraryFiles = list.ToArray();
                    } else {
                        libraryFiles = Array.Empty<string>();
                    }
                } else {
                    Snackbar.Add($"Failed to load library: {resp.StatusCode}", Severity.Error);
                    libraryFiles = Array.Empty<string>();
                }
            } catch (Exception ex) {
                Snackbar.Add($"Error loading library: {ex.Message}", Severity.Error);
                libraryFiles = Array.Empty<string>();
            }
        }
    }

    private async Task SelectFromLibrary(string url) {
        if (SelectedBlock != null) {
            SelectedBlock.Props ??= new Dictionary<string, object>();
            SelectedBlock.Props["imageUrl"] = url;
            SelectedBlock.Props["alt"] = SelectedBlock.Props.TryGetValue("alt", out var a) ? a?.ToString() ?? string.Empty : string.Empty;
            ImageUrl = url;
            if (OnUpdated.HasDelegate) await OnUpdated.InvokeAsync(SelectedBlock);
            Snackbar.Add("Selected image from library.", Severity.Success);
            isLibraryOpen = false;
        }
    }

    private async Task Save() {
        if (SelectedBlock == null) return;
        SelectedBlock.Props["title"] = Title ?? string.Empty;
        SelectedBlock.Props["subtitle"] = Subtitle ?? string.Empty;
        if (OnUpdated.HasDelegate) await OnUpdated.InvokeAsync(SelectedBlock);
        Snackbar.Add("Block updated.", Severity.Success);
    }
}
