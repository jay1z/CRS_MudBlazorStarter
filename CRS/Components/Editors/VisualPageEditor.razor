@page "/Admin/VisualEditor"
@attribute [Authorize(Roles = "Admin")]
@using CRS.Components.Editors.Models
@using CRS.Models
@using CRS.Components.Editors.Dialogs
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject ITenantContext TenantContext
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IJSRuntime JS
@inject NavigationManager Navigation
@using MudBlazor

<MudGrid>
 <MudItem xs="9">
 <MudPaper Class="pa-3">
 <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
 <MudText Typo="Typo.h6">Canvas</MudText>
 <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="AddRowClicked">+ Add Row</MudButton>
 </MudStack>

 <MudDivider Class="my-2" />

 <div>
 @if (!isEditorReady) {
 <MudPaper Class="pa-6 d-flex justify-center align-center">
 <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
 </MudPaper>
 } else if (EditorModel.Blocks.Count ==0) {
 <MudAlert Severity="Severity.Info">No blocks. Add a section or row to start.</MudAlert>
 } else {
 foreach (var b in EditorModel.Blocks) {
 <BlockPreview Block="b" SelectedBlock="SelectedBlock" OnSelect="EventCallback.Factory.Create<Block>(this, HandleSelect)" OnEdit="EventCallback.Factory.Create<Block>(this, HandleEditBlock)" OnInsert="EventCallback.Factory.Create<Block>(this, async (blk) => await OpenInsertModuleDialog(blk))" OnMoveUp="EventCallback.Factory.Create<Block>(this, HandleMoveUp)" OnMoveDown="EventCallback.Factory.Create<Block>(this, HandleMoveDown)" />
 }
 }
 </div>
 </MudPaper>
 </MudItem>

 <MudItem xs="3">
 <InspectorPanel SelectedBlock="SelectedBlock" OnUpdated="EventCallback.Factory.Create<Block>(this, HandleInspectorUpdate)" />
 </MudItem>
</MudGrid>

<FloatingToolbar OnSave="EventCallback.Factory.Create(this, SaveAsync)" OnPublish="EventCallback.Factory.Create(this, PublishAsync)" OnInsert="EventCallback.Factory.Create(this, HandleToolbarInsert)" OnUndo="EventCallback.Factory.Create(this, Undo)" OnRedo="EventCallback.Factory.Create(this, Redo)" CanUndo="false" CanRedo="false" />

@code {
 private EditorPageModel EditorModel = new EditorPageModel();
 private Block? SelectedBlock;
 private CRS.Models.TenantHomepage? homepage;
 private bool isEditorReady = false;

 protected override async Task OnInitializedAsync() {
 // Load tenant homepage if available
 if (!TenantContext.TenantId.HasValue) {
 isEditorReady = true; // still show editor UI but no tenant-specific data
 return;
 }
 await using var db = await DbFactory.CreateDbContextAsync();
 homepage = await db.TenantHomepages.FirstOrDefaultAsync(h => h.TenantId == TenantContext.TenantId);
 if (homepage != null && !string.IsNullOrWhiteSpace(homepage.DraftJson)) {
 try {
 var model = System.Text.Json.JsonSerializer.Deserialize<EditorPageModel>(homepage.DraftJson);
 if (model != null) EditorModel = model;
 } catch {
 }
 }
 isEditorReady = true;
 await InvokeAsync(StateHasChanged);
 }

 private async Task HandleAddBlock(string type) {
 var block = new Block { Type = type };
 if (type == "section" || type == "row") block.Children = new List<Block>();
 EditorModel.Blocks.Add(block);
 await InvokeAsync(StateHasChanged);
 }

 private async Task AddRowClicked() {
 var options = new DialogOptions { CloseOnEscapeKey = true };
 var dialog = await DialogService.ShowAsync<SelectColumnsDialog>("Select Row Layout", new DialogParameters(), options);
 var result = await dialog.Result;
 if (!result.Canceled) {
 var widths = result.Data as string[] ?? new string[] { "1" };
 var row = new Block { Type = "row", Children = new List<Block>() };
 foreach (var w in widths) {
 var col = new Block { Type = "column", Children = new List<Block>() };
 col.Props ??= new Dictionary<string, object>();
 col.Props["width"] = w; // string representation like "1", "1/3", etc.
 row.Children.Add(col);
 }
 EditorModel.Blocks.Add(row);
 await InvokeAsync(StateHasChanged);
 }
 }

 private async Task HandleAddChild(Block child) {
 // child was already added by renderer; just select it
 SelectedBlock = child;
 await InvokeAsync(StateHasChanged);
 }

 private async Task HandleEditBlock(Block block) {
 SelectedBlock = block;
 await InvokeAsync(StateHasChanged);
 }

 private async Task HandleSelect(Block block) {
 SelectedBlock = block;
 await InvokeAsync(StateHasChanged);
 }

 private async Task HandleMoveUp(Block block) {
 var parent = FindParent(EditorModel.Blocks, block);
 if (parent == null) {
 var idx = EditorModel.Blocks.FindIndex(x => x.Id == block.Id);
 if (idx >0) { var item = EditorModel.Blocks[idx]; EditorModel.Blocks.RemoveAt(idx); EditorModel.Blocks.Insert(idx -1, item); }
 } else {
 var idx = parent.Children.FindIndex(x => x.Id == block.Id);
 if (idx >0) { var item = parent.Children[idx]; parent.Children.RemoveAt(idx); parent.Children.Insert(idx -1, item); }
 }
 await InvokeAsync(StateHasChanged);
 }

 private async Task HandleMoveDown(Block block) {
 var parent = FindParent(EditorModel.Blocks, block);
 if (parent == null) {
 var idx = EditorModel.Blocks.FindIndex(x => x.Id == block.Id);
 if (idx >=0 && idx < EditorModel.Blocks.Count -1) { var item = EditorModel.Blocks[idx]; EditorModel.Blocks.RemoveAt(idx); EditorModel.Blocks.Insert(idx +1, item); }
 } else {
 var idx = parent.Children.FindIndex(x => x.Id == block.Id);
 if (idx >=0 && idx < parent.Children.Count -1) { var item = parent.Children[idx]; parent.Children.RemoveAt(idx); parent.Children.Insert(idx +1, item); }
 }
 await InvokeAsync(StateHasChanged);
 }

 private Block? FindParent(List<Block> search, Block child) {
 foreach (var b in search) {
 if (b.Children != null && b.Children.Any(c => c.Id == child.Id)) return b;
 var found = FindParent(b.Children ?? new List<Block>(), child);
 if (found != null) return found;
 }
 return null;
 }

 private async Task OpenInsertModuleDialog(Block targetColumn) {
 var parameters = new DialogParameters { };
 var options = new DialogOptions { CloseOnEscapeKey = true };
 var dialog = await DialogService.ShowAsync<InsertModuleDialog>("Insert Module", parameters, options);
 var result = await dialog.Result;
 if (!result.Canceled) {
 var moduleType = result.Data as string;
 if (!string.IsNullOrEmpty(moduleType)) {
 var module = new Block { Type = moduleType, Props = new Dictionary<string, object>() };
 if (moduleType == "text") module.Props["content"] = "<p>New text</p>";
 if (targetColumn.Children == null) targetColumn.Children = new List<Block>();
 targetColumn.Children.Add(module);
 SelectedBlock = module;
 await InvokeAsync(StateHasChanged);
 }
 }
 }

 private async Task HandleInspectorUpdate(Block updated) {
 // Nothing special required; model updated in-place
 SelectedBlock = updated;
 await InvokeAsync(StateHasChanged);
 }

 private void Undo() {
 // TODO: implement undo stack
 Snackbar.Add("Undo not implemented yet", Severity.Info);
 }

 private void Redo() {
 // TODO: implement redo stack
 Snackbar.Add("Redo not implemented yet", Severity.Info);
 }

 private async Task SaveAsync() {
 if (!TenantContext.TenantId.HasValue) {
 Snackbar.Add("Tenant not resolved.", Severity.Warning);
 return;
 }
 try {
 await using var db = await DbFactory.CreateDbContextAsync();
 var localHomepage = homepage ?? new CRS.Models.TenantHomepage { TenantId = TenantContext.TenantId!.Value };
 localHomepage.DraftJson = System.Text.Json.JsonSerializer.Serialize(EditorModel);
 localHomepage.MetaTitle = EditorModel.MetaTitle;
 localHomepage.MetaDescription = EditorModel.MetaDescription;
 localHomepage.DateModified = DateTime.UtcNow;
 localHomepage.DraftHtml = GenerateHtmlFromEditorModel(EditorModel);

 if (await db.TenantHomepages.AnyAsync(h => h.TenantId == localHomepage.TenantId)) {
 db.TenantHomepages.Update(localHomepage);
 } else {
 db.TenantHomepages.Add(localHomepage);
 }
 await db.SaveChangesAsync();
 homepage = localHomepage;
 Snackbar.Add("Draft saved.", Severity.Success);
 } catch (Exception ex) {
 Snackbar.Add($"Error saving draft: {ex.Message}", Severity.Error);
 }
 }

 private async Task PublishAsync() {
 if (homepage == null) {
 await SaveAsync();
 if (homepage == null) return; // still null
 }
 try {
 homepage.PublishedJson = System.Text.Json.JsonSerializer.Serialize(EditorModel);
 var rawHtml = GenerateHtmlFromEditorModel(EditorModel);
 homepage.PublishedHtml = CRS.Services.HtmlSanitizerHelper.Sanitize(rawHtml);
 homepage.DraftHtml = rawHtml;
 homepage.IsPublished = true;
 homepage.DateModified = DateTime.UtcNow;

 await using var db = await DbFactory.CreateDbContextAsync();
 if (await db.TenantHomepages.AnyAsync(h => h.TenantId == homepage.TenantId)) {
 db.TenantHomepages.Update(homepage);
 } else {
 db.TenantHomepages.Add(homepage);
 }
 await db.SaveChangesAsync();
 Snackbar.Add("Published.", Severity.Success);
 } catch (Exception ex) {
 Snackbar.Add($"Error publishing: {ex.Message}", Severity.Error);
 }
 }

 private async Task PreviewAsync() {
 if (!TenantContext.TenantId.HasValue) {
 Snackbar.Add("No tenant selected for preview.", Severity.Warning);
 return;
 }
 var url = $"/tenant/preview/{TenantContext.TenantId.Value}";
 try {
 await JS.InvokeVoidAsync("open", url, "_blank");
 } catch {
 Navigation.NavigateTo(url, forceLoad: true);
 }
 }

 private string GenerateHtmlFromEditorModel(EditorPageModel model) {
 var sb = new System.Text.StringBuilder();
 foreach (var b in model.Blocks) {
 RenderBlockHtml(b, sb);
 }
 return sb.ToString();
 }

 private void RenderBlockHtml(Block b, System.Text.StringBuilder sb) {
 switch (b.Type) {
 case "section":
 sb.Append("<section>");
 if (b.Children != null) foreach (var c in b.Children) RenderBlockHtml(c, sb);
 sb.Append("</section>");
 break;
 case "row":
 sb.Append("<div class=\"row\">");
 if (b.Children != null) foreach (var c in b.Children) RenderBlockHtml(c, sb);
 sb.Append("</div>");
 break;
 case "column":
 sb.Append("<div class=\"column\">");
 if (b.Children != null) foreach (var c in b.Children) RenderBlockHtml(c, sb);
 sb.Append("</div>");
 break;
 case "text":
 if (b.Props != null && b.Props.TryGetValue("content", out var content)) {
 sb.Append(content?.ToString());
 }
 break;
 case "image":
 if (b.Props != null && b.Props.TryGetValue("imageUrl", out var url)) {
 var alt = b.Props.TryGetValue("alt", out var a) ? a?.ToString() : string.Empty;
 sb.Append($"<img src=\"{System.Net.WebUtility.HtmlEncode(url?.ToString() ?? string.Empty)}\" alt=\"{System.Net.WebUtility.HtmlEncode(alt ?? string.Empty)}\" />");
 }
 break;
 default:
 // For modules we might store HTML in props["content"]
 if (b.Props != null && b.Props.TryGetValue("content", out var html)) sb.Append(html?.ToString());
 break;
 }
 }

 private async Task HandleToolbarInsert() {
 var target = SelectedBlock ?? (EditorModel.Blocks.FirstOrDefault(b => b.Type == "column") ?? new Block { Type = "column", Children = new List<Block>() });
 if (target.Type != "column") {
 // find a column under selected or fallback to top-level
 var col = EditorModel.Blocks.SelectMany(b => b.Children ?? new List<Block>()).FirstOrDefault(c => c.Type == "column");
 if (col != null) target = col;
 }
 await OpenInsertModuleDialog(target);
 }
}
