@page "/Admin/GrapesEditor"
@using MudBlazor
@using Microsoft.AspNetCore.Components
@using System.Net.Http.Json
@using System.Text.Json
@inject IJSRuntime JS
@inject ISnackbar Snackbar
@inject HttpClient Http

<PageTitle>GrapesJS Prototype</PageTitle>

<MudText Typo="Typo.h5" Class="mb-2">GrapesJS Editor Prototype</MudText>
<MudText Typo="Typo.body2" Class="mb-4">This is a minimal integration prototype. Styles and complete mapping are intentionally omitted.</MudText>

<MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Class="mb-2">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="LoadSample">Load Sample</MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ExportHtml">Export HTML</MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Save">Save</MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Default" OnClick="DestroyEditor">Destroy</MudButton>
    <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="ShowBlocks">Blocks</MudButton>
    <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="ShowStyle">Style</MudButton>
</MudStack>

<MudPaper Class="pa-4" Style="min-height:500px;">
    <div id="gjs" style="height:480px;border:1px solid var(--mud-palette-divider);"></div>
</MudPaper>

<MudText Typo="Typo.subtitle2" Class="mt-4">Exported HTML</MudText>
<MudPaper Class="pa-3">
    <MudTextField Lines="8" ReadOnly="true" @bind-Value="ExportedHtml" FullWidth="true" />
</MudPaper>

@code {
    private bool _initialized;
    private string ExportedHtml = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (!_initialized) {
            _initialized = true;
            try {
                await JS.InvokeVoidAsync("grapesInterop.init", "gjs");
                Snackbar.Add("GrapesJS initialized (prototype)", Severity.Success);
            } catch (Exception ex) {
                Snackbar.Add($"GrapesJS init error: {ex.Message}", Severity.Error);
            }
        }
    }

    private async Task ShowBlocks() {
        await JS.InvokeVoidAsync("grapesInterop.showBlocks");
    }

    private async Task ShowStyle() {
        await JS.InvokeVoidAsync("grapesInterop.showStyleManager");
    }

    private async Task LoadSample() {
        var sample = "<section><h2>GrapesJS sample</h2><p>This content was loaded from Blazor.</p></section>";
        await JS.InvokeVoidAsync("grapesInterop.loadHtml", sample);
        Snackbar.Add("Sample loaded", Severity.Info);
    }

    private async Task ExportHtml() {
        try {
            var html = await JS.InvokeAsync<string>("grapesInterop.getHtml");
            ExportedHtml = html ?? string.Empty;
            StateHasChanged();
            Snackbar.Add("Exported HTML retrieved", Severity.Success);
        } catch (Exception ex) {
            Snackbar.Add($"Export failed: {ex.Message}", Severity.Error);
        }
    }

    private async Task Save() {
        try {
            var html = await JS.InvokeAsync<string>("grapesInterop.getHtml");
            var css = await JS.InvokeAsync<string>("grapesInterop.getCss");
            var comps = await JS.InvokeAsync<string>("grapesInterop.getComponents");
            var name = "GrapesJS Prototype Page";
            var payload = new { Name = name, Html = html ?? string.Empty, ComponentsJson = comps ?? string.Empty };
            var resp = await Http.PostAsJsonAsync("/api/grapes/save", payload);
            if (resp.IsSuccessStatusCode) {
                using var doc = await JsonDocument.ParseAsync(await resp.Content.ReadAsStreamAsync());
                if (doc.RootElement.TryGetProperty("url", out var url)) {
                    var u = url.GetString();
                    Snackbar.Add($"Saved: {u}", Severity.Success);
                    await JS.InvokeVoidAsync("navigator.clipboard.writeText", u);
                }
            } else {
                var txt = await resp.Content.ReadAsStringAsync();
                Snackbar.Add($"Save failed: {txt}", Severity.Error);
            }
        } catch (Exception ex) {
            Snackbar.Add($"Save error: {ex.Message}", Severity.Error);
        }
    }

    private async Task DestroyEditor() {
        await JS.InvokeVoidAsync("grapesInterop.destroy");
        Snackbar.Add("Editor destroyed", Severity.Info);
    }
}
