@page "/Admin/GrapesStudio"
@attribute [AllowAnonymous]
@using MudBlazor
@inject ISnackbar Snackbar
@inject IJSRuntime JS
@implements IDisposable

<PageTitle>Grapes Studio Test</PageTitle>

<div id="studio-editor" style="height:100dvh; background: #fff; border:1px solid rgba(0,0,0,0.06);">
    <noscript>Please enable JavaScript to use the Studio SDK.</noscript>
</div>

@code {
    private DotNetObjectReference<CRS.Components.Editors.GrapesStudio>? _dotNetRef;
    private bool _initialized = false;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender && !_initialized) {
            _initialized = true;
            _dotNetRef = DotNetObjectReference.Create(this);
            try {
                await JS.InvokeVoidAsync("loadGrapesStudioDeps");
                var result = await JS.InvokeAsync<object>("initGrapesStudio", "#studio-editor", _dotNetRef);
                Snackbar.Add("Grapes Studio initialized", Severity.Success);
            } catch (Exception ex) {
                Console.WriteLine(ex);
                Snackbar.Add("Failed to initialize Grapes Studio: " + ex.Message, Severity.Error);
            }
        }
    }

    [JSInvokable]
    public Task NotifySaveStatus(string status, string message) {
        switch (status) {
            case "saving": InvokeAsync(() => Snackbar.Add(message ?? "Saving...", Severity.Info)); break;
            case "saved": InvokeAsync(() => Snackbar.Add(message ?? "Saved", Severity.Success)); break;
            case "error": InvokeAsync(() => Snackbar.Add(message ?? "Error", Severity.Error)); break;
        }
        return Task.CompletedTask;
    }

    public void Dispose() {
        try {
            _dotNetRef?.Dispose();
            JS.InvokeVoidAsync("disposeGrapesStudio");
        } catch { }
    }
}