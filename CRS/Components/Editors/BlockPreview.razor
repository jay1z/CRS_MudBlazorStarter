@using CRS.Components.Editors.Models
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor

<style>
    .preview-block {
        position: relative;
    }

        .preview-block:hover {
            box-shadow: 04px12px rgba(0,0,0,0.06);
        }

        .preview-block.selected-block {
            outline: 2px solid var(--mud-palette-primary);
            box-shadow: 06px20px rgba(33,150,243,0.06);
        }

    .inline-toolbar {
        position: absolute;
        top: 6px;
        right: 6px;
        display: flex;
        gap: 6px;
        z-index: 50;
    }

        .inline-toolbar .tb-btn {
            background: rgba(255,255,255,0.95);
            border: none;
            padding: 6px;
            border-radius: 4px;
            cursor: pointer;
        }

            .inline-toolbar .tb-btn:hover {
                background: rgba(255,255,255,1);
            }

    .section-handle {
        position: absolute;
        top: -12px;
        left:50%;
        transform: translateX(-50%);
        background: var(--mud-palette-surface);
        border-radius: 4px;
        padding: 2px 6px;
        box-shadow: 02px 6px rgba(0,0,0,0.06);
        cursor: pointer;
        z-index: 60;
    }

    .row-handle {
        position: absolute;
        top: -10px;
        left: 8px;
        background: var(--mud-palette-surface);
        border-radius: 4px;
        padding: 2px 6px;
        box-shadow: 02px 6px rgba(0,0,0,0.06);
        cursor: pointer;
        z-index: 60;
    }

    .site-section {
        padding: 24px0;
    }

    .site-row {
        display: flex;
        gap: 12px;
        align-items: stretch;
    }

    .site-column {
        min-width: 0;
        min-height: 140px;
        border-radius: 4px;
    }

    .site-module {
        padding: 8px;
    }

    .module-text {
        white-space: normal;
    }

    .empty-column {
        display: flex;
        align-items: center;
        justify-content: center;
        border: 1px dashed rgba(0,0,0,0.08);
        background: rgba(250,250,250,0.6);
        min-height: 120px;
        border-radius: 4px;
    }

        .empty-column .add-module-btn {
            display: inline-flex;
            padding: 6px12px;
            border-radius: 4px;
            border: 1px solid rgba(0,0,0,0.08);
            background: white;
            cursor: pointer;
        }
</style>

@* Renders a live preview of the block tree using real page-like markup. Clicking a wrapper selects the block via OnSelect. *@
<div class="preview-block @CssClass" draggable="true" @ondragstart="HandleDragStart" @ondragover:preventDefault @ondrop="HandleDrop" @ondragend="HandleDragEnd" @onpointerdown="HandleSelect" style="@Style">
 @if (Block.Type == "section") {
 <div class="section-root">
 <div class="section-handle" @onclick:stopPropagation="true" @onclick="() => OnAddRow.InvokeAsync(Block)">+ Row</div>
 @if (SelectedBlock != null && SelectedBlock.Id == Block.Id) {
 <div class="inline-toolbar">
 <button class="tb-btn" title="Edit" @onclick="@(async () => { if (OnEdit.HasDelegate) await OnEdit.InvokeAsync(Block); })">✎</button>
 <button class="tb-btn" title="Move Up" @onclick="@(async () => { if (OnMoveUp.HasDelegate) await OnMoveUp.InvokeAsync(Block); })">↑</button>
 <button class="tb-btn" title="Move Down" @onclick="@(async () => { if (OnMoveDown.HasDelegate) await OnMoveDown.InvokeAsync(Block); })">↓</button>
 </div>
 }
 <section class="site-section">
 @if (Block.Children != null) {
 @foreach (var c in Block.Children) {
 <BlockPreview Block="c" SelectedBlock="SelectedBlock" OnSelect="OnSelect" OnEdit="OnEdit" OnInsert="OnInsert" OnMoveUp="OnMoveUp" OnMoveDown="OnMoveDown" OnAddRow="OnAddRow" OnAddColumn="OnAddColumn" OnDrop="OnDrop" />
 }
 }
 </section>
 </div>
 } else if (Block.Type == "row") {
 <div class="row-root" style="position:relative;">
 <div class="row-handle" @onclick:stopPropagation="true" @onclick="() => OnAddColumn.InvokeAsync(Block)">+ Col</div>
 @if (SelectedBlock != null && SelectedBlock.Id == Block.Id) {
 <div class="inline-toolbar">
 <button class="tb-btn" title="Edit" @onclick="@(async () => { if (OnEdit.HasDelegate) await OnEdit.InvokeAsync(Block); })">✎</button>
 <button class="tb-btn" title="Move Up" @onclick="@(async () => { if (OnMoveUp.HasDelegate) await OnMoveUp.InvokeAsync(Block); })">↑</button>
 <button class="tb-btn" title="Move Down" @onclick="@(async () => { if (OnMoveDown.HasDelegate) await OnMoveDown.InvokeAsync(Block); })">↓</button>
 </div>
 }
 <div class="site-row d-flex">
 @if (Block.Children != null) {
 @foreach (var c in Block.Children) {
 <BlockPreview Block="c" SelectedBlock="SelectedBlock" OnSelect="OnSelect" OnEdit="OnEdit" OnInsert="OnInsert" OnMoveUp="OnMoveUp" OnMoveDown="OnMoveDown" OnAddRow="OnAddRow" OnAddColumn="OnAddColumn" OnDrop="OnDrop" />
 }
 }
 </div>
 </div>
 } else if (Block.Type == "column") {
 <div class="column-root">
 @if (SelectedBlock != null && SelectedBlock.Id == Block.Id) {
 <div class="inline-toolbar">
 <button class="tb-btn" title="Edit" @onclick="@(async () => { if (OnEdit.HasDelegate) await OnEdit.InvokeAsync(Block); })">✎</button>
 <button class="tb-btn" title="Insert" @onclick="@(async () => { if (OnInsert.HasDelegate) await OnInsert.InvokeAsync(Block); })">＋</button>
 <button class="tb-btn" title="Move Up" @onclick="@(async () => { if (OnMoveUp.HasDelegate) await OnMoveUp.InvokeAsync(Block); })">↑</button>
 <button class="tb-btn" title="Move Down" @onclick="@(async () => { if (OnMoveDown.HasDelegate) await OnMoveDown.InvokeAsync(Block); })">↓</button>
 </div>
 }
 <div class="site-column" style="@ColumnStyle">
 @if (Block.Children != null && Block.Children.Count >0) {
 @foreach (var c in Block.Children) {
 <BlockPreview Block="c" SelectedBlock="SelectedBlock" OnSelect="OnSelect" OnEdit="OnEdit" OnInsert="OnInsert" OnMoveUp="OnMoveUp" OnMoveDown="OnMoveDown" OnAddRow="OnAddRow" OnAddColumn="OnAddColumn" OnDrop="OnDrop" />
 }
 } else {
 <div class="empty-column">
 <div>
 <button type="button" class="add-module-btn" @onclick="HandleInsertClick">+ Module</button>
 </div>
 </div>
 }
 </div>
 </div>
 } else {
 <div class="site-module">
 @* Render common modules similar to site *@
 @if (TypeName == "text" || TypeName == "html") {
 @if (Block.Props != null && Block.Props.TryGetValue("content", out var content)) {
 <div class="module-text">@((MarkupString)(content?.ToString() ?? string.Empty))</div>
 }
 } else if (TypeName == "image") {
 string? src = null;
 string? alt = null;
 if (Block.Props != null) {
 if (Block.Props.TryGetValue("src", out var s)) src = s?.ToString();
 if (Block.Props.TryGetValue("url", out var u) && string.IsNullOrEmpty(src)) src = u?.ToString();
 if (Block.Props.TryGetValue("alt", out var a)) alt = a?.ToString();
 }
 if (!string.IsNullOrEmpty(src)) {
 <img src="@src" alt="@alt" style="max-width:100%;height:auto;display:block;" />
 }
 } else if (TypeName == "cta" || TypeName == "button") {
 var text = Block.Props != null && Block.Props.TryGetValue("text", out var t) ? t?.ToString() : "Click";
 var href = Block.Props != null && Block.Props.TryGetValue("href", out var h) ? h?.ToString() : "#";
 <a class="btn btn-primary" href="@href">@text</a>
 } else {
 @* fallback show type name *@
 <div class="module-placeholder">@Block.Type</div>
 }
 </div>
 }
</div>

@code {
    [Parameter] public Block Block { get; set; } = new Block();
    [Parameter] public Block? SelectedBlock { get; set; }
    [Parameter] public EventCallback<Block> OnSelect { get; set; }
    [Parameter] public EventCallback<Block> OnEdit { get; set; }
    [Parameter] public EventCallback<Block> OnInsert { get; set; }
    [Parameter] public EventCallback<Block> OnMoveUp { get; set; }
    [Parameter] public EventCallback<Block> OnMoveDown { get; set; }

    // new callbacks for hover handles
    [Parameter] public EventCallback<Block> OnAddRow { get; set; }
    [Parameter] public EventCallback<Block> OnAddColumn { get; set; }

    // drop callback for drag-and-drop
    [Parameter] public EventCallback<Block> OnDrop { get; set; }

    private string TypeName => (Block?.Type ?? string.Empty).ToLowerInvariant();

    private string ColumnStyle {
        get {
            if (Block?.Props != null && Block.Props.TryGetValue("width", out var w) && w != null) {
                var token = w.ToString() ?? string.Empty;
                if (token.Contains('/')) {
                    var parts = token.Split('/');
                    if (parts.Length == 2 && int.TryParse(parts[0], out var n) && int.TryParse(parts[1], out var d) && d != 0) {
                        var pct = (double)n / d * 100.0;
                        var pctStr = pct.ToString("0.###", System.Globalization.CultureInfo.InvariantCulture) + "%";
                        return $"flex:00 {pctStr}; max-width: {pctStr};";
                    }
                }
                if (token.EndsWith("%")) return $"flex:00 {token}; max-width:{token};";
            }
            return "flex:11 auto;";
        }
    }

    private string CssClass => SelectedBlock != null && SelectedBlock.Id == Block.Id ? "selected-block" : string.Empty;
    private string Style => string.Empty;

    private async Task HandleSelect(PointerEventArgs e) {
        if (OnSelect.HasDelegate) await OnSelect.InvokeAsync(Block);
    }

    private async Task HandleInsertClick() {
        if (OnInsert.HasDelegate) await OnInsert.InvokeAsync(Block);
    }

    private void HandleDragStart(DragEventArgs e) {
        CRS.Components.Editors.DragDropState.LastDraggedId = Block.Id;
    }

    private async Task HandleDrop(DragEventArgs e) {
        // notify editor of a drop onto this block
        if (OnDrop.HasDelegate) await OnDrop.InvokeAsync(Block);
        CRS.Components.Editors.DragDropState.LastDraggedId = null;
    }

    private void HandleDragEnd(DragEventArgs e) {
        CRS.Components.Editors.DragDropState.LastDraggedId = null;
    }
}
