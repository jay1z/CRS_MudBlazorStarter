@page "/Admin/GrapesPreview"
@using MudBlazor
@using System.Net.Http.Json
@inject HttpClient Http
@inject IJSRuntime JS
@inject ISnackbar Snackbar

<PageTitle>GrapesJS Preview</PageTitle>

<MudText Typo="Typo.h5" Class="mb-2">GrapesJS Preview / Versions</MudText>
<MudText Typo="Typo.body2" Class="mb-4">Enter the page slug used when saving (e.g. "page", or "grapessjs-prototype-page") to list saved exports and preview them.</MudText>

<MudGrid>
 <MudItem xs="12" sm="6">
 <MudTextField @bind-Value="slug" Label="Slug" Placeholder="page" />
 </MudItem>
 <MudItem xs="12" sm="6" Class="d-flex align-center">
 <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="LoadList">List Versions</MudButton>
 </MudItem>
</MudGrid>

@if (files != null)
{
 <MudTable Items="files" Dense="true" Elevation="0" Class="my-4">
 <HeaderContent>
 <MudTh>File</MudTh>
 <MudTh>Created (UTC)</MudTh>
 <MudTh>Actions</MudTh>
 </HeaderContent>
 <RowTemplate>
 <MudTd>@context.file</MudTd>
 <MudTd>@context.created.ToString("u")</MudTd>
 <MudTd>
 <MudButton Variant="Variant.Outlined" Size="Size.Small" OnClick="() => Preview(context.url)">Preview</MudButton>
 <MudButton Variant="Variant.Text" Size="Size.Small" OnClick="() => LoadIntoEditor(context.url)">Load into Editor</MudButton>
 </MudTd>
 </RowTemplate>
 </MudTable>
}

@if (!string.IsNullOrEmpty(selectedUrl))
{
 <MudText Typo="Typo.h6" Class="mb-2">Preview: @selectedUrl</MudText>
 <div style="height:600px;border:1px solid rgba(0,0,0,0.08);">
 <iframe src="@selectedUrl" style="width:100%;height:100%;border:0;"></iframe>
 </div>
}

@code {
 private string slug = "page";
 private IEnumerable<ExportFile>? files;
 private string? selectedUrl;

 private record ExportFile(string file, string url, DateTime created);

 private async Task LoadList()
 {
 try
 {
 var resp = await Http.GetAsync($"/api/grapes/list/{slug}");
 if (!resp.IsSuccessStatusCode) {
 Snackbar.Add($"Could not list exports: {resp.StatusCode}", Severity.Error);
 files = null;
 return;
 }

 var list = await resp.Content.ReadFromJsonAsync<List<ExportFile>>();
 files = list ?? Enumerable.Empty<ExportFile>();
 }
 catch (Exception ex)
 {
 Snackbar.Add($"Error listing exports: {ex.Message}", Severity.Error);
 }
 }

 private void Preview(string url)
 {
 selectedUrl = url;
 }

 private async Task LoadIntoEditor(string url)
 {
 try
 {
 var html = await Http.GetStringAsync(url);
 await JS.InvokeVoidAsync("grapesInterop.loadHtml", html);
 Snackbar.Add("Loaded into editor", Severity.Success);
 }
 catch (Exception ex)
 {
 Snackbar.Add($"Error loading into editor: {ex.Message}", Severity.Error);
 }
 }
}
