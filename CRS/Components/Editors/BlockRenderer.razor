@using CRS.Components.Editors.Models
@using MudBlazor
@using System.Linq
@using Microsoft.AspNetCore.Components.Web
@inherits ComponentBase

@* Styles for editor block preview and selection *@
<style>
    .editor-block .section {
        background: #fafafa;
        padding: 12px;
        border-radius: 6px;
    }

    .editor-block .row {
        background: #fff;
        padding: 10px;
        border: 1px solid #eee;
        border-radius: 4px;
        display: flex;
        gap: 12px;
    }

    .editor-block .column {
        background: #fff;
        padding: 8px;
        border: 1px dashed #f0f0f0;
        border-radius: 4px;
    }

    .editor-block .module {
        background: #fff;
        padding: 8px;
        border: 1px solid #f4f4f4;
    }

    .editor-block .selected {
        outline: 2px solid var(--mud-palette-primary);
        box-shadow: 003px6px rgba(33,150,243,0.06);
    }

    .editor-block .block-controls {
        /* shrink controls container so it doesn't take layout space */
        display: inline-flex;
        align-items: center;
        justify-content: center;
    }

    .editor-block .hero {
        padding: 24px;
        color: white;
        border-radius: 6px;
        background-size: cover;
        background-position: center;
    }

    .editor-block .gallery img {
        max-width: 100%;
        height: auto;
        display: inline-block;
        margin: 4px;
        border-radius: 4px;
    }
</style>

@code {
    [Parameter] public Block Block { get; set; } = new Block();
    [Parameter] public Block? SelectedBlock { get; set; }
    [Parameter] public EventCallback<Block> OnEdit { get; set; }
    [Parameter] public EventCallback<Block> OnSelect { get; set; }
    [Parameter] public EventCallback<Block> OnAddChild { get; set; }
    [Parameter] public EventCallback<Block> OnMoveUp { get; set; }
    [Parameter] public EventCallback<Block> OnMoveDown { get; set; }
    [Parameter] public EventCallback<Block> OnInsertModule { get; set; }

    private bool IsSelected => SelectedBlock != null && SelectedBlock.Id == Block.Id;

    private async Task SelectBlock(MouseEventArgs e) {
        // Prevent event bubbling when clicking control buttons (they handle their own events)
        if (OnSelect.HasDelegate)
            await OnSelect.InvokeAsync(Block);
        if (OnEdit.HasDelegate)
            await OnEdit.InvokeAsync(Block);
    }

    private async Task AddChild() {
        var child = new Block { Type = "text", Props = new Dictionary<string, object> { ["content"] = "<p>New</p>" } };
        Block.Children ??= new List<Block>();
        Block.Children.Add(child);
        if (OnAddChild.HasDelegate)
            await OnAddChild.InvokeAsync(child);
    }

    private async Task InsertModuleClicked() {
        if (OnInsertModule.HasDelegate)
            await OnInsertModule.InvokeAsync(Block);
    }

    private async Task MoveUpClicked() { if (OnMoveUp.HasDelegate) await OnMoveUp.InvokeAsync(Block); }
    private async Task MoveDownClicked() { if (OnMoveDown.HasDelegate) await OnMoveDown.InvokeAsync(Block); }

    private string GetColumnStyle(Block column) {
        try {
            if (column?.Props != null && column.Props.TryGetValue("width", out var wObj) && wObj != null) {
                var token = wObj.ToString()?.Trim() ?? string.Empty;
                if (string.IsNullOrWhiteSpace(token)) return "flex:11 auto; min-width:0;";

                if (token == "1")
                    return "flex:11 auto; min-width:0;"; // equal share

                // fraction like1/3 or2/3
                if (token.Contains('/')) {
                    var parts = token.Split('/');
                    if (parts.Length == 2 && int.TryParse(parts[0], out var num) && int.TryParse(parts[1], out var denom) && denom != 0) {
                        var pct = (double)num / denom * 100.0;
                        var pctStr = pct.ToString("0.###", System.Globalization.CultureInfo.InvariantCulture) + "%";
                        return $"flex:00 {pctStr}; max-width: {pctStr};";
                    }
                }

                // percentage like33%
                if (token.EndsWith("%")) {
                    var pct = token;
                    return $"flex:00 {pct}; max-width: {pct};";
                }
            }
        } catch { }
        return "flex:11 auto; min-width:0;";
    }

    private MarkupString ToMarkup(object? o) {
        return new MarkupString(o?.ToString() ?? string.Empty);
    }

    // computed lowercase type for module rendering
    private string TypeName => (Block?.Type ?? string.Empty).ToLowerInvariant();
}

<div class="editor-block">
    @if (Block.Type == "section") {
        <div class="section @(IsSelected ? "selected" : "")" @onclick="SelectBlock">
            <div class="d-flex justify-space-between align-center mb-2">
                <div><strong>Section</strong></div>
                <div class="block-controls" @onclick:stopPropagation>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                        <MudMenuItem OnClick="AddChild">+ Column</MudMenuItem>
                        <MudMenuItem OnClick="MoveUpClicked">Up</MudMenuItem>
                        <MudMenuItem OnClick="MoveDownClicked">Down</MudMenuItem>
                    </MudMenu>
                </div>
            </div>

            @if (Block.Children != null) {
                @foreach (var c in Block.Children) {
                    <BlockRenderer Block="c" SelectedBlock="SelectedBlock" OnEdit="OnEdit" OnSelect="OnSelect" OnAddChild="OnAddChild" OnMoveUp="OnMoveUp" OnMoveDown="OnMoveDown" />
                }
            }
        </div>
    } else if (Block.Type == "row") {
        <div class="row @(IsSelected ? "selected" : "")" @onclick="SelectBlock">
            <div class="d-flex justify-space-between align-center mb-2">
                <div><strong>Row</strong></div>
                <div class="block-controls" @onclick:stopPropagation>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                        <MudMenuItem OnClick="AddChild">+ Column</MudMenuItem>
                        <MudMenuItem OnClick="MoveUpClicked">Up</MudMenuItem>
                        <MudMenuItem OnClick="MoveDownClicked">Down</MudMenuItem>
                    </MudMenu>
                </div>
            </div>

            @if (Block.Children != null) {
                @foreach (var c in Block.Children) {
                    <BlockRenderer Block="c" SelectedBlock="SelectedBlock" OnEdit="OnEdit" OnSelect="OnSelect" OnAddChild="OnAddChild" OnMoveUp="OnMoveUp" OnMoveDown="OnMoveDown" />
                }
            }
        </div>
    } else if (Block.Type == "column") {
        var colStyle = GetColumnStyle(Block);
        <div class="column @(IsSelected ? "selected" : "")" style="@colStyle" @onclick="SelectBlock">
            <div class="d-flex justify-space-between align-center mb-2">
                <div>
                    <strong>Column</strong>
                    @if (Block.Props != null && Block.Props.TryGetValue("width", out var w)) {
                        <span class="mud-typography-caption ml-2">@w</span>
                    }
                </div>
                <div class="block-controls" @onclick:stopPropagation>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                        <MudMenuItem OnClick="InsertModuleClicked">+ Module</MudMenuItem>
                        <MudMenuItem OnClick="MoveUpClicked">Up</MudMenuItem>
                        <MudMenuItem OnClick="MoveDownClicked">Down</MudMenuItem>
                    </MudMenu>
                </div>
            </div>

            @if (Block.Children != null && Block.Children.Count > 0) {
                @foreach (var c in Block.Children) {
                    <BlockRenderer Block="c" SelectedBlock="SelectedBlock" OnEdit="OnEdit" OnSelect="OnSelect" OnAddChild="OnAddChild" OnMoveUp="OnMoveUp" OnMoveDown="OnMoveDown" />
                }
            } else {
                <div class="mud-typography-body2 mud-text-center pa-4">Empty column — click <strong>+ Module</strong> to insert content</div>
            }
        </div>
    } else {
        <div class="module @(IsSelected ? "selected" : "")" @onclick="SelectBlock">
            <div class="d-flex justify-space-between align-center mb-2">
                <div><strong>@Block.Type</strong></div>
                <div class="block-controls" @onclick:stopPropagation>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" AnchorOrigin="Origin.BottomCenter" TransformOrigin="Origin.TopCenter">
                        <MudMenuItem OnClick="() => OnEdit.InvokeAsync(Block)">Edit</MudMenuItem>
                        <MudMenuItem OnClick="MoveUpClicked">Up</MudMenuItem>
                        <MudMenuItem OnClick="MoveDownClicked">Down</MudMenuItem>
                    </MudMenu>
                </div>
            </div>

            @* Render specific module UIs to match actual site rendering *@
            @if (TypeName == "text" || TypeName == "html") {
                @if (Block.Props != null && Block.Props.TryGetValue("content", out var content)) {
                    <div>@ToMarkup(content)</div>
                }
            } else if (TypeName == "image") {
                string? src = null;
                string? alt = null;
                if (Block.Props != null) {
                    if (Block.Props.TryGetValue("src", out var s)) src = s?.ToString();
                    if (Block.Props.TryGetValue("url", out var u) && string.IsNullOrEmpty(src)) src = u?.ToString();
                    if (Block.Props.TryGetValue("alt", out var a)) alt = a?.ToString();
                }

                if (!string.IsNullOrEmpty(src)) {
                    <img src="@src" alt="@alt" style="max-width:100%;height:auto;border-radius:4px;" />
                    @if (!string.IsNullOrEmpty(alt)) {
                        <div class="mud-typography-caption mt-1">@alt</div>
                    }
                } else {
                    <div class="mud-typography-body2 mud-text-center pa-4">No image source</div>
                }
            } else if (TypeName == "gallery") {
                IEnumerable<string>? imgs = null;
                if (Block.Props != null && Block.Props.TryGetValue("images", out var imgsObj) && imgsObj is IEnumerable<object> objs) {
                    imgs = objs.Select(o => o?.ToString() ?? string.Empty);
                } else if (Block.Props != null && Block.Props.TryGetValue("images", out imgsObj) && imgsObj is IEnumerable<string> simgs) {
                    imgs = simgs;
                }

                if (imgs != null && imgs.Any()) {
                    <div class="gallery">
                        @foreach (var i in imgs) {
                            <img src="@i" alt="" style="width:120px;height:auto;" />
                        }
                    </div>
                } else {
                    <div class="mud-typography-body2 mud-text-center pa-4">No gallery images</div>
                }
            } else if (TypeName == "cta" || TypeName == "button") {
                var text = Block.Props != null && Block.Props.TryGetValue("text", out var t) ? t?.ToString() : "Click";
                var href = Block.Props != null && Block.Props.TryGetValue("href", out var h) ? h?.ToString() : "#";
                <a class="mud-button-root mud-button-filled mud-button-filled-primary mud-ripple" href="@href" style="display:inline-block;padding:8px12px;border-radius:4px;text-decoration:none;color:white;background:var(--mud-palette-primary);">@text</a>
            } else if (TypeName == "hero") {
                string? bg = null;
                if (Block.Props != null && Block.Props.TryGetValue("background", out var b)) bg = b?.ToString();
                var heroStyle = !string.IsNullOrEmpty(bg) ? $"background-image:url('{bg}');" : string.Empty;
                <div class="hero" style="@heroStyle">
                    @if (Block.Props != null && Block.Props.TryGetValue("content", out var hcontent)) {
                        <div>@ToMarkup(hcontent)</div>
                    } else {
                        <div class="mud-typography-h6">Hero</div>
                    }
                </div>
            } else if (TypeName == "testimonial") {
                if (Block.Props != null && Block.Props.TryGetValue("quote", out var quote)) {
                    <blockquote>@ToMarkup(quote)</blockquote>
                } else {
                    <div class="mud-typography-body2">Testimonial</div>
                }
            } else if (TypeName == "faq") {
                if (Block.Props != null && Block.Props.TryGetValue("items", out var itemsObj) && itemsObj is IEnumerable<object> items) {
                    @foreach (var it in items) {
                        if (it is IDictionary<string, object> dict) {
                            var q = dict.ContainsKey("question") ? dict["question"]?.ToString() : string.Empty;
                            var a = dict.ContainsKey("answer") ? dict["answer"]?.ToString() : string.Empty;
                            <div><strong>@q</strong><div>@ToMarkup(a)</div></div>
                        }
                    }
                } else {
                    <div class="mud-typography-body2">FAQ</div>
                }
            } else {
                // fallback: show raw content if present
                @if (Block.Props != null && Block.Props.TryGetValue("content", out var rawContent)) {
                    <div>@ToMarkup(rawContent)</div>
                } else {
                    <div class="mud-typography-body2 mud-text-center pa-4">@Block.Type</div>
                }
            }
        </div>
    }
</div>
