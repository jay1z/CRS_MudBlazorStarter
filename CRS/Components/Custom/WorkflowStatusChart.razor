@using CRS.Models
@using MudBlazor
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar

<MudPaper Elevation="2" Class="pa-4 mb-6">
    <MudText Typo="Typo.h6" Class="mb-3">Reserve Study Timeline</MudText>
    @if (!string.IsNullOrEmpty(ChartId)) {
        <div id="@ChartId" style="height:350px;"></div>
    }
</MudPaper>

@code {
    [Parameter]
    public string ChartId { get; set; } = "workflow-chart";

    [Parameter]
    public ReserveStudy? ReserveStudy { get; set; }

    private bool scriptsLoaded = false;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            if (!scriptsLoaded) {
                await LoadScriptsAsync();
                scriptsLoaded = true;
            }

            await InitializeChartAsync();
        } else if (ReserveStudy != null) {
            await UpdateChartAsync();
        }
    }

    private async Task LoadScriptsAsync() {
        try {
            // Use the loader in wwwroot/js/apexcharts-interop.js which returns a Promise
            await JSRuntime.InvokeVoidAsync("loadApexChartsLibrary");
        } catch (Exception ex) {
            Console.WriteLine($"Error loading scripts: {ex.Message}");
            try { Snackbar.Add($"Error loading chart scripts: {ex.Message}", Severity.Error); } catch { }
        }
    }

    private async Task InitializeChartAsync() {
        if (ReserveStudy == null) return;
        await UpdateChartAsync();
    }

    private async Task UpdateChartAsync() {
        if (ReserveStudy == null) return;

        var workflowStatuses = GenerateWorkflowData();

        var infoColor = "#2196f3";
        var surfaceColor = "#ffffff";
        var warningColor = "#ff9800";

        var chartOptions = new {
            series = new[] {
 new {
 name = "Reserve Study Progress",
 data = workflowStatuses,
 color = infoColor
 }
 },
            chart = new { height = 350, type = "rangeBar", toolbar = new { show = true }, fontFamily = "Roboto, sans-serif", background = surfaceColor },
            plotOptions = new { bar = new { horizontal = true, barHeight = "75%", borderRadius = 8 } },
            xaxis = new { type = "datetime" },
            tooltip = new { theme = "light", x = new { }, custom = "function(opts) { const start = new Date(opts.y1).toLocaleDateString(); const end = new Date(opts.y2).toLocaleDateString(); return `<div class=\"apexcharts-tooltip-rangebar\"><div><span>${opts.w.globals.labels[opts.dataPointIndex]}</span></div><div><span>Start: ${start}</span><br><span>End: ${end}</span></div></div>`; }" },
            annotations = new { xaxis = new[] { new { x = new DateTimeOffset(DateTime.Now).ToUnixTimeMilliseconds(), borderColor = warningColor, label = new { text = "Today" } } } }
        };

        try {
            // Call the global init function exposed by apexcharts-interop.js
            await JSRuntime.InvokeVoidAsync("initDumbbellChart", ChartId, chartOptions);
        } catch (Exception ex) {
            Console.WriteLine($"Error creating chart: {ex.Message}");
            try { Snackbar.Add($"Error creating timeline chart: {ex.Message}", Severity.Error); } catch { }
        }
    }

    private object[] GenerateWorkflowData() {
        var data = new List<object>();
        if (ReserveStudy == null || !ReserveStudy.DateCreated.HasValue) return data.ToArray();

        var today = DateTime.Now;
        var startDate = ReserveStudy.DateCreated.Value;

        void AddWorkflowStatusData(string name, DateTime start, DateTime end) {
            data.Add(new { x = name, y = new[] { new DateTimeOffset(start).ToUnixTimeMilliseconds(), new DateTimeOffset(end).ToUnixTimeMilliseconds() }, fillColor = GetColorByWorkflowStatus(name) });
        }

        AddWorkflowStatusData("Request Created", startDate, ReserveStudy.Status >= ReserveStudy.WorkflowStatus.ProposalCreated ? ReserveStudy.LastModified ?? today : today);

        if (ReserveStudy.Status >= ReserveStudy.WorkflowStatus.ProposalCreated) {
            var proposalDate = ReserveStudy.Proposal?.DateCreated ?? ReserveStudy.LastModified ?? startDate.AddDays(7);
            AddWorkflowStatusData("Proposal Phase", proposalDate, ReserveStudy.Status >= ReserveStudy.WorkflowStatus.ProposalAccepted ? ReserveStudy.Proposal?.DateApproved ?? today : today);
        }

        if (ReserveStudy.Status >= ReserveStudy.WorkflowStatus.ProposalAccepted) {
            var financialInfoDate = ReserveStudy.Status >= ReserveStudy.WorkflowStatus.FinancialInfoRequested ? ReserveStudy.FinancialInfo?.DateCreated ?? ReserveStudy.Proposal?.DateApproved?.AddDays(3) ?? startDate.AddDays(14) : startDate.AddDays(14);
            AddWorkflowStatusData("Financial Information", financialInfoDate, ReserveStudy.Status >= ReserveStudy.WorkflowStatus.FinancialInfoReviewed ? ReserveStudy.FinancialInfo?.DateReviewed ?? today : today);
        }

        if (ReserveStudy.Status >= ReserveStudy.WorkflowStatus.FinancialInfoReviewed) {
            var siteVisitDate = ReserveStudy.FinancialInfo?.DateReviewed?.AddDays(7) ?? startDate.AddDays(21);
            AddWorkflowStatusData("Site Visit", siteVisitDate, ReserveStudy.Status >= ReserveStudy.WorkflowStatus.SiteVisitDataEntered ? siteVisitDate.AddDays(3) : today);
        }

        if (ReserveStudy.Status >= ReserveStudy.WorkflowStatus.SiteVisitDataEntered) {
            var reportDate = startDate.AddDays(28);
            AddWorkflowStatusData("Report Preparation", reportDate, ReserveStudy.Status >= ReserveStudy.WorkflowStatus.ReportComplete ? reportDate.AddDays(14) : today);
        }

        if (ReserveStudy.Status >= ReserveStudy.WorkflowStatus.ReportComplete) {
            var completionDate = ReserveStudy.Status == ReserveStudy.WorkflowStatus.RequestCompleted ? ReserveStudy.LastModified ?? startDate.AddDays(45) : startDate.AddDays(45);
            AddWorkflowStatusData("Study Completion", completionDate.AddDays(-5), completionDate);
        }

        return data.ToArray();
    }

    private string GetColorByWorkflowStatus(string workflowName) => workflowName switch {
        "Request Created" => "#594ae2",
        "Proposal Phase" => "#ff4081",
        "Financial Information" => "#2196f3",
        "Site Visit" => "#1ec8a5",
        "Report Preparation" => "#4caf50",
        "Study Completion" => "#673ab7",
        _ => "#594ae2"
    };

    public async ValueTask DisposeAsync() {
        try {
            await JSRuntime.InvokeVoidAsync("destroyChart", ChartId);
        } catch { }
    }
}