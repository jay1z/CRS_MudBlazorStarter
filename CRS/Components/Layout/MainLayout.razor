@inherits LayoutComponentBase
@attribute [Authorize(Roles = "Admin,Specialist")]
@using CRS.Data
@using CRS.Themes
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@inject IHostEnvironment HostEnvironment
@inject ThemeService ThemeService

@* <MudThemeProvider @ref="@provider" @bind-IsDarkMode="@useDarkMode" Theme="_themeManager.Theme" /> *@
<MudThemeProvider Theme="@ThemeService.CurrentTheme" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    @* <MudThemeManagerButton OnClick="@((e) => OpenThemeManager(true))" />
    <MudThemeManager Open="_themeManagerOpen" OpenChanged="OpenThemeManager" Theme="_themeManager" ThemeChanged="UpdateTheme" />
    <MudAppBar Elevation="_themeManager.AppBarElevation"> *@
    <MudAppBar Elevation="0">
        <MudStaticNavDrawerToggle DrawerId="nav-drawer" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
        <MudText Typo="Typo.h5" Class="ml-3">Community Reserve Specialists</MudText>
        <MudSpacer />
        <AuthorizeView>
            <MudText Typo="Typo.body1">@context.User.Identity?.Name</MudText>
            @foreach (var role in context.User.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value))
            {
                <MudChip T="string" Color="Color.Primary" Class="ml-2">@role</MudChip>
            }
        </AuthorizeView>
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />
    </MudAppBar>
    @* <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="_themeManager.DrawerClipMode" Elevation="_themeManager.DrawerElevation"> *@
    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="25">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        <ErrorBoundary>
            @Body
        </ErrorBoundary>
    </MudMainContent>

    <MudScrollToTop TopOffset="100" Selector="#unique_id_scroll_section">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward">Go to top</MudButton>
    </MudScrollToTop>
</MudLayout>


<div id="blazor-error-ui" data-nosnippet>
    @if (HostEnvironment.IsProduction())
    {
        <span>An error has occurred.</span>
    }
    else
    {
        <span>An unhandled exception occurred.</span>
    }
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {

    // private MudThemeProvider provider;
    // private bool useDarkMode;
    private bool _drawerOpen = true;

    protected override void OnInitialized()
    {
        ThemeService.OnThemeChanged += StateHasChanged;
        ThemeService.SetTheme(new Default().Theme!);

        // _themeManager.Theme = CrispyThemeSunsetSerenade.Theme;
        // StateHasChanged();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     if (firstRender)
    //     {
    //         useDarkMode = await provider.GetSystemPreference();
    //         await provider.WatchSystemPreference(OnSystemPreferenceChanged);
    //         StateHasChanged();
    //     }
    // }

    // private async Task OnSystemPreferenceChanged(bool newValue)
    // {
    //     useDarkMode = newValue;
    //     StateHasChanged();
    // }

    // private ThemeManagerTheme _themeManager = new ThemeManagerTheme();
    // public bool _themeManagerOpen = false;

    // void OpenThemeManager(bool value)
    // {
    //     _themeManagerOpen = value;
    // }

    // void UpdateTheme(ThemeManagerTheme value)
    // {
    //     _themeManager = value;
    //     StateHasChanged();
    // }

    public void Dispose()
    {
        ThemeService.OnThemeChanged -= StateHasChanged;
    }
}


