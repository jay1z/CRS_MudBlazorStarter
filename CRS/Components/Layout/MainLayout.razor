@inherits LayoutComponentBase
@implements IDisposable

@using CRS.Data
@using Microsoft.EntityFrameworkCore
@using CRS.Themes
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@using Microsoft.AspNetCore.Identity
@using CRS.Services
@using CRS.Services.Tenant
@inject IHostEnvironment HostEnvironment
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager
@inject NavigationManager NavigationManager
@inject ThemeService ThemeService
@inject ITenantContext TenantContext
@inject IJSRuntime JS
@inject IUserSettingsService UserSettingsService
@inject AuthenticationStateProvider AuthStateProvider
@inject IDbContextFactory<ApplicationDbContext> DbFactory

<!-- MudBlazor providers: present once per layout (supports prerendering) -->
<MudThemeProvider Theme="@ThemeService.CurrentTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="25">
        <MudStaticNavDrawerToggle DrawerId="nav-drawer" Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" />
        <MudText Typo="Typo.h5" Class="ml-3">Community Reserve Specialists</MudText>
        <MudSpacer />
        <AuthorizeView>
            <MudText Typo="Typo.body1">@context.User.Identity?.Name</MudText>
            @foreach (var role in context.User.Claims.Where(c => c.Type == ClaimTypes.Role).Select(c => c.Value)) {
                <MudChip T="string" Color="Color.Primary" Class="ml-2">@role</MudChip>
            }
        </AuthorizeView>
        <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" AnchorOrigin="Origin.BottomRight" TransformOrigin="Origin.TopRight">
            <MudMenuItem Href="/Account/Manage" Icon="@Icons.Material.Filled.ManageAccounts" IconColor="Color.Primary">Profile</MudMenuItem>
            <MudMenuItem Href="/Settings" Icon="@Icons.Material.Filled.Settings" IconColor="Color.Primary">Settings</MudMenuItem>
        </MudMenu>
    </MudAppBar>

    <MudDrawer id="nav-drawer" @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="25">
        <NavMenu />
    </MudDrawer>

    <MudMainContent id="main-content" Class="mt-16 pa-4">
        <ErrorBoundary>
            @Body
        </ErrorBoundary>
    </MudMainContent>

    <MudScrollToTop TopOffset="100" Selector="#main-content">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.ArrowUpward">Go to top</MudButton>
    </MudScrollToTop>
</MudLayout>

<EnvironmentBanner />

<div id="blazor-error-ui" data-nosnippet>
    @if (HostEnvironment.IsProduction()) {
        <span>An error has occurred.</span>
    }
    else {
        <span>An unhandled exception occurred.</span>
    }
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private string? currentUrl;
    private bool _drawerOpen = true;

    protected override async Task OnInitializedAsync() {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        ThemeService.OnThemeChanged += StateHasChanged;
        ThemeService.SetTheme(new Default().Theme!);

        // Ensure TenantContext is populated from authenticated user's tenant claim (login-driven)
        try {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            if (user?.Identity?.IsAuthenticated == true && TenantContext?.TenantId == null) {
                var claimTenant = user.FindFirst(CRS.Services.Tenant.TenantClaimTypes.TenantId)?.Value;
                if (int.TryParse(claimTenant, out var tid)) {
                    TenantContext.TenantId = tid;
                    TenantContext.IsResolvedByLogin = true;
                    // Load tenant metadata (name/branding) from DB
                    try {
                        await using var db = await DbFactory.CreateDbContextAsync();
                        var t = await db.Tenants.FindAsync(tid);
                        if (t != null) {
                            TenantContext.TenantName = t.Name;
                            TenantContext.Subdomain = t.Subdomain;
                            TenantContext.IsActive = t.IsActive;
                            TenantContext.BrandingJson = t.BrandingJson;
                            try { ThemeService.ApplyTenantBrandingIfAvailableAndChanged(); } catch { }
                        }
                    } catch { }
                }
            }
        } catch { }
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose() {
        NavigationManager.LocationChanged -= OnLocationChanged;
        ThemeService.OnThemeChanged -= StateHasChanged;
    }
}


