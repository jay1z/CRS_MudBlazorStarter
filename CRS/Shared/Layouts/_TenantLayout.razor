@inherits LayoutComponentBase
@using MudBlazor
@using Microsoft.AspNetCore.Components.Authorization
@using CRS.Services.Tenant
@inject ITenantContext TenantContext
@inject ThemeService ThemeService

<!-- MudBlazor providers for tenant layout -->
<MudThemeProvider Theme="@EffectiveTheme" />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />

<MudLayout>
    <MudAppBar Elevation="25">
        <MudText Typo="Typo.h5" Class="ml-3">@GetTitle()</MudText>
        <MudSpacer />
        <AuthorizeView>
            <Authorized>
                <MudMenu Icon="@Icons.Material.Filled.Person" Color="Color.Inherit" Direction="Direction.Bottom" OffsetY="true">
                    <MudText Typo="Typo.body1" Class="pa-4">Account</MudText>
                    <MudDivider />
                    <MudMenuItem Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Primary" Href="/Dashboard">Dashboard</MudMenuItem>
                    <MudMenuItem Icon="@Icons.Material.Filled.ManageAccounts" IconColor="Color.Primary" Href="/Account/Manage">Profile</MudMenuItem>
                </MudMenu>
            </Authorized>
            <NotAuthorized>
                <MudButton Href="/Account/Register" Variant="Variant.Filled" Size="Size.Large" Class="mx-4">Register</MudButton>
                <MudButton Href="/Account/Login" Variant="Variant.Filled" Size="Size.Large">Login</MudButton>
            </NotAuthorized>
        </AuthorizeView>
    </MudAppBar>

    <MudMainContent Class="pt-16 px-4">
        <MudContainer MaxWidth="MaxWidth.ExtraLarge">
            <ErrorBoundary>
                @Body
            </ErrorBoundary>
        </MudContainer>
    </MudMainContent>
</MudLayout>

<EnvironmentBanner />

@code {
    private string GetTitle() => string.IsNullOrWhiteSpace(TenantContext?.TenantName) ? "Reserve Studies" : TenantContext.TenantName!;
    private MudTheme EffectiveTheme = new MudTheme();

    protected override void OnInitialized() {
        // Apply tenant branding on init and listen for changes
        ApplyBranding();
        TenantContext.OnTenantChanged += OnTenantChanged;
        ThemeService.OnThemeChanged += StateHasChanged;
    }

    private void OnTenantChanged() {
        InvokeAsync(() => { ApplyBranding(); StateHasChanged(); });
    }

    private void ApplyBranding() {
        // SaaS Refactor: Use ThemeService to apply branding payload from TenantContext
        try {
            ThemeService.ApplyTenantBrandingIfAvailable();
            var theme = ThemeService.GetPresetByName("Default") ?? new MudTheme();
            // Copy the applied theme to the EffectiveTheme used by the provider
            EffectiveTheme = ThemeService.CurrentTheme;
        } catch {
            EffectiveTheme = new MudTheme();
        }
    }

    public void Dispose() {
        try { TenantContext.OnTenantChanged -= OnTenantChanged; } catch { }
        try { ThemeService.OnThemeChanged -= StateHasChanged; } catch { }
    }
}
